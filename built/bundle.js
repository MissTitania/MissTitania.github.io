/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 1);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports) {

function getWhiteLegalMoves(blackBoard, whiteBoard)
{
	let directionShiftsX = [-1, 0, 1, -1, 1, -1, 0, 1];
	let directionShiftsY = [-1, -1, -1, 0, 0, 1, 1, 1];
	let newLegalMoves = [];
	for(let i = 0; i < 64; ++i)
		newLegalMoves[i] = false;
	for(let position = 0; position < 64; ++position)
	{
		if(blackBoard[position] || whiteBoard[position])
			continue;
		for(let d = 0; d < 8 && !newLegalMoves[position]; ++d)
		{
			let x = position % 8 + directionShiftsX[d];
			let y = Math.floor(position / 8 + .01) + directionShiftsY[d];
			while(x >= 0 && x < 8 && y >= 0 && y < 8 && blackBoard[8 * y + x])
			{
				x += directionShiftsX[d];
				y += directionShiftsY[d];
				if(x >= 0 && x < 8 && y >= 0 && y < 8 && whiteBoard[8 * y + x])
				{
					newLegalMoves[position] = true;
					break;
				}
			}
		}
	}
	return newLegalMoves;
}

function getBlackLegalMoves(blackBoard, whiteBoard)
{
	let directionShiftsX = [-1, 0, 1, -1, 1, -1, 0, 1];
	let directionShiftsY = [-1, -1, -1, 0, 0, 1, 1, 1];
	let newLegalMoves = [];
	for(let i = 0; i < 64; ++i)
		newLegalMoves[i] = false;
	for(let position = 0; position < 64; ++position)
	{
		if(blackBoard[position] || whiteBoard[position])
			continue;
		for(let d = 0; d < 8 && !newLegalMoves[position]; ++d)
		{
			let x = position % 8 + directionShiftsX[d];
			let y = Math.floor(position / 8) + directionShiftsY[d];
			while(x >= 0 && x < 8 && y >= 0 && y < 8 && whiteBoard[8 * y + x])
			{
				x += directionShiftsX[d];
				y += directionShiftsY[d];
				if(x >= 0 && x < 8 && y >= 0 && y < 8 && blackBoard[8 * y + x])
				{
					newLegalMoves[position] = true;
					break;
				}
			}
		}
	}
	return newLegalMoves;
}

function makeWhiteMove(position, blackBoard, whiteBoard)
{
	whiteBoard[position] = true;
	let directionShiftsX = [-1, 0, 1, -1, 1, -1, 0, 1];
	let directionShiftsY = [-1, -1, -1, 0, 0, 1, 1, 1];
	for(let d = 0; d < 8; ++d)
	{
		let x = position % 8 + directionShiftsX[d];
		let y = Math.floor(position / 8) + directionShiftsY[d];
		while(x >= 0 && x < 8 && y >= 0 && y < 8 && blackBoard[8 * y + x])
		{
			x += directionShiftsX[d];
			y += directionShiftsY[d];
			if(x >= 0 && x < 8 && y >= 0 && y < 8 && whiteBoard[8 * y + x])
			{
				do
				{
					x -= directionShiftsX[d];
					y -= directionShiftsY[d];
					blackBoard[8 * y + x] = false;
					whiteBoard[8 * y + x] = true;
				}
				while(blackBoard[8 * (y - directionShiftsY[d]) + x - directionShiftsX[d]]);
				break;
			}
		}
	}
}

function makeBlackMove(position, blackBoard, whiteBoard)
{
	blackBoard[position] = true;
	let directionShiftsX = [-1, 0, 1, -1, 1, -1, 0, 1];
	let directionShiftsY = [-1, -1, -1, 0, 0, 1, 1, 1];
	for(let d = 0; d < 8; ++d)
	{
		let x = position % 8 + directionShiftsX[d];
		let y = Math.floor(position / 8) + directionShiftsY[d];
		while(x >= 0 && x < 8 && y >= 0 && y < 8 && whiteBoard[8 * y + x])
		{
			x += directionShiftsX[d];
			y += directionShiftsY[d];
			if(x >= 0 && x < 8 && y >= 0 && y < 8 && blackBoard[8 * y + x])
			{
				do
				{
					x -= directionShiftsX[d];
					y -= directionShiftsY[d];
					whiteBoard[8 * y + x] = false;
					blackBoard[8 * y + x] = true;
				}
				while(whiteBoard[8 * (y - directionShiftsY[d]) + x - directionShiftsX[d]]);
				break;
			}
		}
	}
}

module.exports = {getBlackLegalMoves, getWhiteLegalMoves, makeBlackMove, makeWhiteMove};

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

const precompString = __webpack_require__(2);
const neuralCoefficientString = __webpack_require__(3);
const boardFunctions = __webpack_require__(0);
const computeBlackMove = __webpack_require__(4);

const router =
{
	'#/':
	{
		pageId: 'about-page',
		linkId: 'about-link'
	},
	'#/othello':
	{
		pageId: 'othello-page',
		linkId: 'othello-link'
	},
	'#/pokemon':
	{
		pageId: 'pokemon-page',
		linkId: 'pokemon-link'
	},
	'#/resume':
	{
		pageId: 'resume-page',
		linkId: 'resume-link'
	}
};

function hashChange(hash)
{
	window.location.hash = hash;
}

function hashHandler()
{
	const hash = window.location.hash;
	if (!router.hasOwnProperty(hash))
		window.location.hash = '#/';
	else
	{
		const pageId = router[hash].pageId;
		Object.keys(router).map(key => router[key].pageId).forEach(id =>
		{
			const domElement = document.getElementById(id);
			if (id === pageId)
				domElement.style.display = 'block';
			else
				domElement.style.display = 'none';
		});
	}
}

function addEvents()
{
	Object.keys(router).forEach(hash =>
	{
		document.getElementById(router[hash].linkId).addEventListener('click', () => hashChange(hash));
	});
	document.getElementById("othello-reset").addEventListener('click', resetGame);
}

window.addEventListener("hashchange", hashHandler, false);
window.addEventListener("DOMContentLoaded", () =>
{
	addEvents();
	hashHandler();
	loadGameAssets();
	resetGame();
}, false);

function loadGameAssets()
{
	precomps = [];
	let lines = precompString.split("\n");
	for(let k = 0; k < lines.length - 1; ++k)
	{
		let stringValues = lines[k].split(",");
		let numValues = [];
		for(let j = 0; j < stringValues.length - 1; ++j)
			numValues[j] = parseInt(stringValues[j]);
		precomps[k] = numValues;
	}
	neuralCoefficients = neuralCoefficientString.split(",");
	for(let k = 0; k < neuralCoefficients.length; ++k)
		neuralCoefficients[k] = parseFloat(neuralCoefficients[k]);
}

function resetGame()
{
	blackPieces = [];
	whitePieces = [];
	for(let i = 0; i < 64; ++i)
	{
		blackPieces[i] = false;
		whitePieces[i] = false;
	}
	blackPieces[27] = true;
	blackPieces[36] = true;
	whitePieces[28] = true;
	whitePieces[35] = true;
	state = 0;
	legalMoves = boardFunctions.getWhiteLegalMoves(blackPieces, whitePieces);
	syncBoard();
}

function syncBoard()
{
	let blackCount = 0;
	let whiteCount = 0;
	for(let i = 0; i < 64; ++i)
	{
		if(blackPieces[i])
		{
			document.getElementById("cell-" + i).className = "space occupied black";
			document.getElementById("cell-" + i).onclick = function(e) {};
			++blackCount;
		}
		else if(whitePieces[i])
		{
			document.getElementById("cell-" + i).className = "space occupied white";
			document.getElementById("cell-" + i).onclick = function(e) {};
			++whiteCount;
		}
		else if(legalMoves[i] && state == 0)
		{
			document.getElementById("cell-" + i).className = "space legal-move";
			document.getElementById("cell-" + i).onclick = function(e)
			{
				boardFunctions.makeWhiteMove(i, blackPieces, whitePieces);
				legalMoves = boardFunctions.getBlackLegalMoves(blackPieces, whitePieces);
				if(legalMoves.every(x => !x))
				{
					legalMoves = boardFunctions.getWhiteLegalMoves(blackPieces, whitePieces);
					if(legalMoves.every(x => !x))
						state = 2;
				}
				else
				{
					state = 1;
					setTimeout(botMove, 400);
				}
				syncBoard();
			};
		}
		else
		{
			document.getElementById("cell-" + i).className = "space";
			document.getElementById("cell-" + i).onclick = function(e) {};
		}
	}
	document.getElementById("black-counter").innerHTML = "Black: " + blackCount;
	document.getElementById("white-counter").innerHTML = "White: " + whiteCount;
	if(state == 0)
		document.getElementById("state-text").innerHTML = "Your move";
	else if(state == 1)
		document.getElementById("state-text").innerHTML = "Thinking...";
	else if(state == 2 && blackCount > whiteCount)
		document.getElementById("state-text").innerHTML = "You lose!";
	else if(state == 2 && blackCount < whiteCount)
		document.getElementById("state-text").innerHTML = "You win!";
	else if(state == 2 && blackCount == whiteCount)
		document.getElementById("state-text").innerHTML = "Tie game!";
}

function botMove()
{
	computeBlackMove();
	legalMoves = boardFunctions.getWhiteLegalMoves(blackPieces, whitePieces);
	if(legalMoves.every(x => !x))
	{
		legalMoves = boardFunctions.getBlackLegalMoves(blackPieces, whitePieces);
		if(legalMoves.every(x => !x))
			state = 2;
		else
			setTimeout(botMove, 400);
	}
	else
		state = 0;
	syncBoard();
}

/***/ }),
/* 2 */
/***/ (function(module, exports) {

module.exports = "1,1,-1,\n0,1,-1,\n0,2,0,2,2,0,0,0,-2,\n0,1,-1,1,2,0,-1,0,-2,\n1,1,-1,1,3,1,-1,3,-1,1,3,1,3,3,1,3,1,-1,-1,1,-1,1,1,-1,-1,-1,-3,\n0,1,-1,1,2,0,-1,3,-2,1,2,0,2,3,1,3,1,-1,-1,0,-2,0,1,-1,-2,-1,-3,\n0,2,0,2,2,0,0,2,-2,2,2,0,2,4,2,2,2,0,0,0,-2,2,4,2,-2,4,-2,2,2,0,2,4,2,0,4,0,2,4,2,4,4,2,4,2,0,2,4,2,2,2,0,4,0,-2,0,0,-2,0,2,0,-2,2,-2,0,2,0,2,2,0,2,0,-2,-2,0,-2,0,0,-2,-2,-2,-4,\n0,1,-1,1,2,0,-1,3,-2,1,2,0,2,3,1,3,1,-1,-1,0,-2,3,4,2,-2,4,-3,1,2,0,2,3,1,0,4,-1,2,3,1,3,4,2,4,2,0,3,4,2,1,2,0,4,0,-2,-1,0,-2,0,1,-1,-2,2,-3,0,1,-1,1,2,0,2,0,-2,-2,-1,-3,-1,0,-2,-3,-2,-4,\n1,1,-1,1,3,0,0,3,-1,1,3,1,3,3,1,3,1,-1,-1,1,-1,3,3,-1,-1,3,-3,1,3,1,3,3,1,1,3,-1,3,3,1,3,5,3,3,3,1,3,3,-1,1,3,1,3,1,-1,0,1,-1,1,1,-1,-1,1,-3,3,3,1,3,5,3,1,3,1,-1,-1,-3,3,5,3,-3,5,-3,1,3,1,3,3,1,1,3,-1,3,3,1,3,5,3,3,3,1,1,1,-1,3,5,3,-1,5,-1,3,3,1,3,5,3,1,5,1,3,5,3,5,5,3,5,3,1,3,5,3,3,3,1,5,1,-1,3,3,1,3,5,3,1,5,1,1,3,1,3,3,1,3,1,-1,3,5,3,1,1,-1,5,-1,-3,-1,1,-1,1,1,-1,-1,1,-3,1,1,-1,1,3,1,1,1,-1,-1,-1,-3,-1,3,1,-3,3,-3,0,1,-1,1,3,1,-1,3,-1,1,3,1,3,3,1,3,1,-1,-1,3,1,1,1,-1,3,-1,-3,-1,-1,-3,-1,1,-1,-3,1,-3,-1,1,-1,1,1,-1,1,-1,-3,-3,-1,-3,-1,-1,-3,-3,-3,-5,\n0,1,-1,1,2,0,-1,3,-2,1,2,0,2,3,1,3,1,-1,-1,0,-2,3,4,-1,-2,4,-3,1,2,0,2,3,1,0,4,-1,2,3,1,3,4,2,4,2,0,3,4,-1,1,2,0,4,0,-2,-1,0,-2,0,1,-1,-2,2,-3,3,4,2,4,5,3,2,3,1,-2,-1,-3,4,5,3,-3,5,-4,1,2,0,2,3,1,0,4,-1,2,3,1,3,4,2,4,2,0,0,1,-1,4,5,3,-1,5,-2,2,3,1,3,4,2,1,5,0,3,4,2,4,5,3,5,3,1,4,5,3,2,3,1,5,1,-1,3,4,2,4,5,3,2,5,1,1,2,0,2,3,1,3,1,-1,4,5,3,0,1,-1,5,-1,-3,-1,0,-2,0,1,-1,-2,2,-3,0,1,-1,1,2,0,2,0,-2,-2,-1,-3,-1,3,1,-3,3,-4,0,1,-1,1,2,0,-1,3,-2,1,2,0,2,3,1,3,1,-1,-1,3,1,0,1,-1,3,-1,-3,-2,-1,-3,-1,0,-2,-3,1,-4,-1,0,-2,0,1,-1,1,-1,-3,-3,-2,-4,-2,-1,-3,-4,-3,-5,\n0,2,0,2,2,0,0,2,-2,2,2,0,2,4,1,2,2,-1,0,1,-2,2,4,0,-1,4,-2,2,2,0,2,4,1,0,4,0,2,4,2,4,4,2,4,2,0,2,4,0,2,2,0,4,0,-2,0,0,-2,0,2,0,-1,2,-2,2,4,2,4,4,0,2,0,-2,-2,0,-2,4,4,-2,-2,4,-4,2,2,0,2,4,1,0,4,0,2,4,2,4,4,2,4,2,0,0,2,0,4,4,0,0,4,-2,2,4,2,4,4,2,2,4,0,4,4,2,4,6,4,4,4,2,4,4,0,2,4,2,4,2,0,2,4,2,4,4,0,0,4,-2,2,2,0,2,4,2,0,2,0,4,4,-2,0,2,0,4,0,-2,0,1,-1,0,2,0,-1,2,-2,0,2,0,2,2,0,2,0,-2,-1,0,-2,0,2,0,-2,2,-4,2,4,2,4,4,0,2,2,0,4,4,2,4,6,4,2,4,2,2,2,0,0,4,2,2,2,0,-1,0,-2,0,0,-2,-2,0,-4,4,4,2,4,6,4,2,4,2,-2,-2,-4,4,6,4,-4,6,-4,2,2,0,2,4,1,1,4,0,2,4,2,4,4,2,4,2,0,0,2,0,4,4,0,0,4,-2,2,4,2,4,4,2,2,4,0,4,4,2,4,6,4,4,4,2,4,4,0,2,4,2,4,2,0,1,2,0,2,2,0,0,2,-2,4,4,2,4,6,4,2,4,2,0,0,-2,4,6,4,-2,6,-2,2,4,2,4,4,2,2,4,0,4,4,2,4,6,4,4,4,2,2,2,0,4,6,4,0,6,0,4,4,2,4,6,4,2,6,2,4,6,4,6,6,4,6,4,2,4,6,4,4,4,2,6,2,0,4,4,2,4,6,4,2,6,2,2,4,2,4,4,2,4,2,0,4,6,4,2,2,0,6,0,-2,2,4,2,4,4,0,2,2,0,4,4,2,4,6,4,2,4,2,2,2,0,4,6,4,0,6,0,2,2,0,2,4,2,0,4,0,2,4,2,4,4,2,4,2,0,0,4,2,2,2,0,4,0,-2,4,4,2,4,6,4,2,6,2,0,2,0,2,2,0,2,0,-2,4,6,4,0,0,-2,6,-2,-4,0,0,-2,0,2,-1,-1,2,-2,0,2,0,2,2,0,2,0,-2,-2,0,-2,2,2,-2,-2,2,-4,0,2,0,2,2,0,0,2,-2,2,2,0,2,4,2,2,2,0,2,2,-2,0,2,0,2,0,-2,-2,0,-2,0,0,-2,-2,0,-4,0,0,-2,0,4,2,0,2,0,-2,-2,-4,-2,4,2,-4,4,-4,0,1,-1,1,2,0,0,0,-2,1,2,0,2,4,2,0,2,0,0,0,-2,0,4,2,-2,4,-2,1,2,0,2,4,2,0,4,0,2,4,2,4,4,2,4,2,0,0,4,2,2,2,0,4,0,-2,0,0,-2,0,4,2,0,4,0,0,2,0,2,2,0,2,0,-2,-2,4,2,0,0,-2,4,-2,-4,-2,0,-2,0,0,-2,-2,0,-4,0,0,-2,0,2,0,0,0,-2,-2,-2,-4,-2,2,0,-4,2,-4,-1,0,-2,0,2,0,-2,2,-2,0,2,0,2,2,0,2,0,-2,-2,2,0,0,0,-2,2,-2,-4,-2,-2,-4,-2,0,-2,-4,0,-4,-2,0,-2,0,0,-2,0,-2,-4,-4,-2,-4,-2,-2,-4,-4,-4,-6,\n0,1,-1,1,2,0,-1,3,-2,1,2,0,2,3,1,3,1,-1,-1,0,-2,3,4,-1,-2,4,-3,1,2,0,2,3,1,0,4,-1,2,3,1,3,4,2,4,2,0,3,4,-1,1,2,0,4,0,-2,-1,0,-2,0,1,-1,-2,2,-3,3,4,2,4,5,0,2,0,-2,-2,-1,-3,4,5,-2,-3,5,-4,1,2,0,2,3,1,0,4,-1,2,3,1,3,4,2,4,2,0,0,1,-1,4,5,0,-1,5,-2,2,3,1,3,4,2,1,5,0,3,4,2,4,5,3,5,3,1,4,5,0,2,3,1,5,1,-1,3,4,2,4,5,0,-1,5,-2,1,2,0,2,3,1,0,1,-1,4,5,-2,0,1,-1,5,-1,-3,-1,0,-2,0,1,-1,-2,2,-3,0,1,-1,1,2,0,2,0,-2,-2,-1,-3,-1,3,1,-3,3,-4,3,4,2,4,5,0,2,3,1,4,5,3,5,6,4,3,4,2,2,3,1,0,4,2,3,2,0,-2,-1,-3,-1,0,-2,-3,1,-4,4,5,3,5,6,4,3,4,2,-3,-2,-4,5,6,4,-4,6,-5,1,2,0,2,3,1,0,4,-1,2,3,1,3,4,2,4,2,0,0,1,-1,4,5,0,-1,5,-2,2,3,1,3,4,2,1,5,0,3,4,2,4,5,3,5,3,1,4,5,0,2,3,1,5,1,-1,0,1,-1,1,2,0,-1,3,-2,4,5,3,5,6,4,3,4,2,-1,0,-2,5,6,4,-2,6,-3,2,3,1,3,4,2,1,5,0,3,4,2,4,5,3,5,3,1,1,2,0,5,6,4,0,6,-1,3,4,2,4,5,3,2,6,1,4,5,3,5,6,4,6,4,2,5,6,4,3,4,2,6,2,0,4,5,3,5,6,4,3,6,2,2,3,1,3,4,2,4,2,0,5,6,4,1,2,0,6,0,-2,3,4,2,4,5,0,2,3,1,4,5,3,5,6,4,3,4,2,2,3,1,5,6,4,1,6,0,1,2,0,2,3,1,0,4,-1,2,3,1,3,4,2,4,2,0,0,4,2,1,2,0,4,0,-2,4,5,3,5,6,4,3,6,2,0,1,-1,1,2,0,2,0,-2,5,6,4,-1,0,-2,6,-2,-4,-1,0,-2,0,1,-1,-2,2,-3,0,1,-1,1,2,0,2,0,-2,-2,-1,-3,2,3,-2,-3,3,-4,0,1,-1,1,2,0,-1,3,-2,1,2,0,2,3,1,3,1,-1,2,3,-2,0,1,-1,3,-1,-3,-2,-1,-3,-1,0,-2,-3,1,-4,-1,0,-2,0,4,2,1,2,0,-3,-2,-4,-2,4,2,-4,4,-5,0,1,-1,1,2,0,-1,0,-2,1,2,0,2,3,1,0,1,-1,-1,0,-2,0,4,2,-2,4,-3,1,2,0,2,3,1,0,4,-1,2,3,1,3,4,2,4,2,0,0,4,2,1,2,0,4,0,-2,-1,0,-2,0,4,2,1,4,0,0,1,-1,1,2,0,2,0,-2,-2,4,2,-1,0,-2,4,-2,-4,-2,-1,-3,-1,0,-2,-3,1,-4,-1,0,-2,0,1,-1,1,-1,-3,-3,-2,-4,-2,2,0,-4,2,-5,-1,0,-2,0,1,-1,-2,2,-3,0,1,-1,1,2,0,2,0,-2,-2,2,0,-1,0,-2,2,-2,-4,-3,-2,-4,-2,-1,-3,-4,0,-5,-2,-1,-3,-1,0,-2,0,-2,-4,-4,-3,-5,-3,-2,-4,-5,-4,-6,\n1,2,-1,1,3,0,0,3,-1,1,3,0,3,3,1,3,1,-1,0,1,-1,2,3,-1,-1,3,-3,1,3,1,3,3,1,1,3,-1,3,3,1,3,5,2,3,3,0,2,3,-1,1,3,1,3,1,-2,-1,1,-1,1,2,-1,-1,2,-3,3,3,1,3,5,1,2,3,-1,-1,0,-3,3,5,-1,-2,5,-3,1,3,1,3,3,1,1,3,-1,3,3,1,3,5,2,3,3,0,1,1,-1,3,5,1,-1,5,-1,3,3,1,3,5,2,1,5,1,3,5,3,5,5,3,5,3,1,3,5,1,3,3,1,5,1,-1,3,3,1,3,5,0,-1,5,-1,1,3,1,3,3,1,3,1,-1,3,5,-1,1,1,-1,5,-1,-3,0,1,-1,1,1,-1,-1,1,-3,1,1,-1,1,3,1,1,1,-1,-1,0,-3,0,3,1,-2,3,-3,2,3,1,3,5,1,1,3,1,3,5,3,5,5,1,3,1,-1,-1,3,1,1,1,-1,3,-1,-3,-1,-1,-3,-1,1,-1,-2,1,-3,3,5,3,5,5,-1,1,-1,-3,-3,-1,-3,5,5,-3,-3,5,-5,1,3,1,2,3,1,1,3,-1,3,3,1,3,5,2,3,3,0,1,1,-1,3,5,1,0,5,-1,3,3,1,3,5,2,1,5,1,3,5,3,5,5,3,5,3,1,3,5,1,2,3,1,5,1,-1,1,1,-1,1,3,1,-1,3,-1,3,5,3,5,5,1,3,1,-1,-1,1,-1,5,5,-1,-1,5,-3,3,3,1,3,5,2,1,5,1,3,5,3,5,5,3,5,3,1,1,3,1,5,5,1,1,5,-1,3,5,3,5,5,3,3,5,1,5,5,3,5,7,5,5,5,3,5,5,1,3,5,3,5,3,1,3,5,3,5,5,1,1,5,-1,3,3,1,3,5,3,1,3,1,5,5,-1,1,3,1,5,1,-1,2,3,1,3,5,1,1,3,1,3,5,3,5,5,1,1,1,-1,0,1,-1,5,5,-1,-1,5,-3,1,3,1,2,3,1,1,1,-1,3,3,1,3,5,3,1,3,1,1,1,-1,1,3,1,1,1,-1,3,5,3,5,5,-1,-1,5,-3,1,1,-1,1,3,1,-1,1,-1,5,5,-3,-1,1,-1,5,-1,-3,0,1,-1,1,2,-1,-1,1,-2,1,1,-1,1,3,0,1,1,-1,-1,0,-2,1,3,-1,-2,3,-3,1,1,-1,1,3,1,-1,3,-1,1,3,1,3,3,1,3,1,-1,1,3,-1,1,1,-1,3,-1,-3,-1,0,-2,-1,1,-1,-2,1,-3,-1,3,-1,1,3,1,1,1,-1,-2,-1,-3,-1,3,1,-3,3,-5,3,3,1,3,5,1,1,3,1,3,5,3,5,5,1,3,1,-1,1,3,1,1,3,1,1,3,-1,3,5,3,5,5,1,3,3,1,5,5,3,5,7,5,3,5,3,3,3,1,1,5,3,3,3,1,2,3,1,3,3,1,1,3,-1,3,1,-1,1,5,3,1,3,1,1,3,1,-1,3,1,3,1,-1,-1,0,-2,0,1,-1,-2,1,-3,-1,1,-1,1,1,-1,1,-1,-3,-2,-1,-3,-1,1,-1,-3,1,-5,3,5,3,5,5,1,3,3,1,5,5,3,5,7,5,3,5,3,3,3,1,1,5,3,1,3,1,-2,-1,-3,-1,-1,-3,-3,-1,-5,5,5,3,5,7,5,3,5,3,-3,-3,-5,5,7,5,-5,7,-5,2,3,1,3,3,1,1,3,-1,3,3,1,3,5,2,3,3,0,1,2,-1,3,5,1,0,5,-1,3,3,1,3,5,2,1,5,1,3,5,3,5,5,3,5,3,1,3,5,1,3,3,1,5,1,-1,1,2,-1,1,3,1,0,3,-1,3,5,3,5,5,1,3,1,-1,-1,1,-1,5,5,-1,-1,5,-3,3,3,1,3,5,2,1,5,1,3,5,3,5,5,3,5,3,1,1,3,1,5,5,1,1,5,-1,3,5,3,5,5,3,3,5,1,5,5,3,5,7,5,5,5,3,5,5,1,3,5,3,5,3,1,3,5,3,5,5,1,3,5,-1,3,3,1,3,5,3,1,3,1,5,5,-1,1,3,1,5,1,-1,1,2,0,1,3,1,0,3,-1,1,3,1,3,3,1,3,1,-1,0,1,-1,1,3,1,-1,3,-3,3,5,3,5,5,1,3,3,1,5,5,3,5,7,5,3,5,3,3,3,1,1,5,3,3,3,1,0,1,-1,1,1,-1,-1,1,-3,5,5,3,5,7,5,3,5,3,-1,-1,-3,5,7,5,-3,7,-3,3,3,1,3,5,2,2,5,1,3,5,3,5,5,3,5,3,1,1,3,1,5,5,1,1,5,-1,3,5,3,5,5,3,3,5,1,5,5,3,5,7,5,5,5,3,5,5,1,3,5,3,5,3,1,2,3,1,3,3,1,1,3,-1,5,5,3,5,7,5,3,5,3,1,1,-1,5,7,5,-1,7,-1,3,5,3,5,5,3,3,5,1,5,5,3,5,7,5,5,5,3,3,3,1,5,7,5,1,7,1,5,5,3,5,7,5,3,7,3,5,7,5,7,7,5,7,5,3,5,7,5,5,5,3,7,3,1,5,5,3,5,7,5,3,7,3,3,5,3,5,5,3,5,3,1,5,7,5,3,3,1,7,1,-1,3,5,3,5,5,1,3,3,1,5,5,3,5,7,5,3,5,3,3,3,1,5,7,5,1,7,1,3,3,1,3,5,3,1,5,1,3,5,3,5,5,3,5,3,1,1,5,3,3,3,1,5,1,-1,5,5,3,5,7,5,3,7,3,1,3,1,3,3,1,3,1,-1,5,7,5,1,1,-1,7,-1,-3,3,3,1,3,5,1,1,3,1,3,5,3,5,5,1,3,1,-1,1,3,1,3,3,1,1,3,-1,3,5,3,5,5,1,3,3,1,5,5,3,5,7,5,3,5,3,3,3,1,1,5,3,3,3,1,2,3,1,3,3,-1,1,1,-1,5,5,3,5,7,5,3,5,3,1,1,-1,5,7,5,-1,7,-1,1,3,1,3,3,1,1,1,-1,3,3,1,3,5,3,1,3,1,1,1,-1,1,5,3,-1,5,-1,3,3,1,3,5,3,1,5,1,3,5,3,5,5,3,5,3,1,1,5,3,3,3,1,5,1,-1,3,1,-1,1,5,3,1,5,1,1,3,1,3,3,1,3,1,-1,-1,5,3,1,1,-1,5,-1,-3,3,5,3,5,5,1,3,3,1,5,5,3,5,7,5,3,5,3,3,3,1,5,7,5,1,7,1,1,1,-1,1,3,1,-1,3,-1,1,3,1,3,3,1,3,1,-1,-1,3,1,1,1,-1,3,-1,-3,5,5,3,5,7,5,3,7,3,-1,1,-1,1,1,-1,1,-1,-3,5,7,5,-1,-1,-3,7,-3,-5,-1,1,-2,1,1,-1,-1,1,-3,1,1,-1,1,3,0,1,1,-2,-1,0,-3,1,3,-1,-2,3,-3,1,1,-1,1,3,0,-1,3,-1,1,3,1,3,3,1,3,1,-1,1,3,-2,1,1,-1,3,-1,-3,-1,-1,-3,-1,1,-1,-2,1,-3,1,3,1,3,3,-1,1,-1,-3,-3,-1,-3,3,3,-3,-3,3,-5,0,1,-1,1,3,0,-1,3,-1,1,3,1,3,3,1,3,1,-1,-1,1,-1,3,3,-1,-1,3,-3,1,3,1,3,3,1,1,3,-1,3,3,1,3,5,3,3,3,1,3,3,-1,1,3,1,3,1,-1,1,3,1,3,3,-1,-1,3,-3,1,1,-1,1,3,1,-1,1,-1,3,3,-3,-1,1,-1,3,-1,-3,-1,-1,-3,-1,1,-1,-2,1,-3,-1,1,-1,1,1,-1,1,-1,-3,-3,-1,-3,-1,1,-1,-3,1,-5,-1,1,-2,1,1,-1,-1,1,-3,1,1,-1,1,5,3,1,3,1,1,1,-1,-1,3,1,1,1,-1,-3,-1,-3,-1,-1,-3,-3,-1,-5,-1,-1,-3,-1,5,3,1,3,1,-3,-3,-5,-3,5,3,-5,5,-5,0,1,-1,1,2,0,-1,1,-2,1,2,0,2,3,1,1,1,-1,-1,1,-1,1,1,-1,-1,1,-3,1,2,0,2,3,1,1,1,-1,2,3,1,3,5,3,1,3,1,1,1,-1,1,3,1,1,1,-1,-1,1,-1,1,1,-1,-1,-1,-3,0,1,-1,1,5,3,1,3,1,-1,-1,-3,-1,5,3,-3,5,-3,1,2,0,2,3,1,0,1,-1,2,3,1,3,5,3,1,3,1,1,1,-1,1,5,3,-1,5,-1,2,3,1,3,5,3,1,5,1,3,5,3,5,5,3,5,3,1,1,5,3,3,3,1,5,1,-1,1,1,-1,1,5,3,1,5,1,1,3,1,3,3,1,3,1,-1,-1,5,3,1,1,-1,5,-1,-3,-1,1,-1,1,1,-1,-1,1,-3,1,1,-1,1,5,3,1,3,1,1,1,-1,-1,5,3,-1,5,-1,1,1,-1,1,3,1,-1,3,-1,1,3,1,3,3,1,3,1,-1,-1,3,1,1,1,-1,3,-1,-3,-1,-1,-3,-1,5,3,1,5,1,-1,1,-1,1,1,-1,1,-1,-3,-3,5,3,-1,-1,-3,5,-3,-5,-1,-1,-3,-1,1,-2,-2,1,-3,-1,1,-1,1,1,-1,1,-1,-3,-3,-1,-3,1,1,-3,-3,1,-5,-1,1,-1,1,1,-1,-1,1,-3,1,1,-1,1,3,1,1,1,-1,1,1,-3,-1,1,-1,1,-1,-3,-3,-1,-3,-1,-1,-3,-3,-1,-5,-1,-1,-3,-1,3,1,-1,1,-1,-3,-3,-5,-3,3,1,-5,3,-5,-1,0,-2,0,1,-1,-1,-1,-3,0,1,-1,1,3,1,-1,1,-1,-1,-1,-3,-1,3,1,-3,3,-3,0,1,-1,1,3,1,-1,3,-1,1,3,1,3,3,1,3,1,-1,-1,3,1,1,1,-1,3,-1,-3,-1,-1,-3,-1,3,1,-1,3,-1,-1,1,-1,1,1,-1,1,-1,-3,-3,3,1,-1,-1,-3,3,-3,-5,-3,-1,-3,-1,-1,-3,-3,-1,-5,-1,-1,-3,-1,1,-1,-1,-1,-3,-3,-3,-5,-3,1,-1,-5,1,-5,-2,-1,-3,-1,1,-1,-3,1,-3,-1,1,-1,1,1,-1,1,-1,-3,-3,1,-1,-1,-1,-3,1,-3,-5,-3,-3,-5,-3,-1,-3,-5,-1,-5,-3,-1,-3,-1,-1,-3,-1,-3,-5,-5,-3,-5,-3,-3,-5,-5,-5,-7,\n0,1,-1,1,2,0,-1,3,-2,1,2,0,2,3,1,3,1,-1,-1,0,-2,3,4,-1,-2,4,-3,1,2,0,2,3,1,0,4,-1,2,3,1,3,4,2,4,2,0,3,4,-1,1,2,0,4,0,-2,-1,0,-2,0,1,-1,-2,2,-3,3,4,2,4,5,0,2,3,-2,-2,-1,-3,4,5,-2,-3,5,-4,1,2,0,2,3,1,0,4,-1,2,3,1,3,4,2,4,2,0,0,1,-1,4,5,0,-1,5,-2,2,3,1,3,4,2,1,5,0,3,4,2,4,5,3,5,3,1,4,5,0,2,3,1,5,1,-1,3,4,2,4,5,0,-1,5,-2,1,2,0,2,3,1,3,1,-1,4,5,-2,0,1,-1,5,-1,-3,-1,0,-2,0,1,-1,-2,2,-3,0,1,-1,1,2,0,2,0,-2,-2,-1,-3,-1,3,1,-3,3,-4,3,4,2,4,5,0,2,3,1,4,5,3,5,6,1,3,1,-1,-1,3,1,0,1,-1,3,-1,-3,-2,-1,-3,-1,0,-2,-3,1,-4,4,5,3,5,6,-1,1,-1,-3,-3,-2,-4,5,6,-3,-4,6,-5,1,2,0,2,3,1,0,4,-1,2,3,1,3,4,2,4,2,0,0,1,-1,4,5,0,-1,5,-2,2,3,1,3,4,2,1,5,0,3,4,2,4,5,3,5,3,1,4,5,0,2,3,1,5,1,-1,0,1,-1,1,2,0,-1,3,-2,4,5,3,5,6,1,3,1,-1,-1,0,-2,5,6,-1,-2,6,-3,2,3,1,3,4,2,1,5,0,3,4,2,4,5,3,5,3,1,1,2,0,5,6,1,0,6,-1,3,4,2,4,5,3,2,6,1,4,5,3,5,6,4,6,4,2,5,6,1,3,4,2,6,2,0,4,5,3,5,6,1,0,6,-1,2,3,1,3,4,2,1,2,0,5,6,-1,1,2,0,6,0,-2,3,4,2,4,5,0,2,3,1,4,5,3,5,6,1,0,1,-1,-1,0,-2,5,6,-1,-2,6,-3,1,2,0,2,3,1,0,1,-1,2,3,1,3,4,2,1,2,0,0,1,-1,1,2,0,1,0,-2,4,5,3,5,6,-1,-2,6,-3,0,1,-1,1,2,0,-1,0,-2,5,6,-3,-1,0,-2,6,-2,-4,-1,0,-2,0,1,-1,-2,2,-3,0,1,-1,1,2,0,2,0,-2,-2,-1,-3,2,3,-2,-3,3,-4,0,1,-1,1,2,0,-1,3,-2,1,2,0,2,3,1,3,1,-1,2,3,-2,0,1,-1,3,-1,-3,-2,-1,-3,-1,0,-2,-3,1,-4,-1,3,-2,0,4,2,1,2,0,-3,-2,-4,-2,4,2,-4,4,-5,3,4,2,4,5,0,2,3,1,4,5,3,5,6,1,3,1,-1,2,3,1,0,4,2,1,4,0,4,5,3,5,6,1,3,4,2,5,6,4,6,7,5,4,5,3,3,4,2,1,5,3,4,3,1,2,3,1,3,4,2,1,4,0,3,1,-1,1,5,3,2,3,1,1,4,2,-1,3,1,4,1,-1,-2,-1,-3,-1,0,-2,-3,1,-4,-1,0,-2,0,1,-1,1,-1,-3,-3,-2,-4,-2,2,0,-4,2,-5,4,5,3,5,6,1,3,4,2,5,6,4,6,7,5,4,5,3,3,4,2,1,5,3,2,3,1,-3,-2,-4,-2,-1,-3,-4,0,-5,5,6,4,6,7,5,4,5,3,-4,-3,-5,6,7,5,-5,7,-6,1,2,0,2,3,1,0,4,-1,2,3,1,3,4,2,4,2,0,0,1,-1,4,5,0,-1,5,-2,2,3,1,3,4,2,1,5,0,3,4,2,4,5,3,5,3,1,4,5,0,2,3,1,5,1,-1,0,1,-1,1,2,0,-1,3,-2,4,5,3,5,6,1,3,1,-1,-1,0,-2,5,6,-1,-2,6,-3,2,3,1,3,4,2,1,5,0,3,4,2,4,5,3,5,3,1,1,2,0,5,6,1,0,6,-1,3,4,2,4,5,3,2,6,1,4,5,3,5,6,4,6,4,2,5,6,1,3,4,2,6,2,0,4,5,3,5,6,1,3,6,-1,2,3,1,3,4,2,1,2,0,5,6,-1,1,2,0,6,0,-2,0,1,-1,1,2,0,-1,3,-2,1,2,0,2,3,1,3,1,-1,-1,0,-2,0,4,2,-2,4,-3,4,5,3,5,6,1,3,4,2,5,6,4,6,7,5,4,5,3,3,4,2,1,5,3,4,3,1,-1,0,-2,0,1,-1,-2,2,-3,5,6,4,6,7,5,4,5,3,-2,-1,-3,6,7,5,-3,7,-4,2,3,1,3,4,2,1,5,0,3,4,2,4,5,3,5,3,1,1,2,0,5,6,1,0,6,-1,3,4,2,4,5,3,2,6,1,4,5,3,5,6,4,6,4,2,5,6,1,3,4,2,6,2,0,1,2,0,2,3,1,0,4,-1,5,6,4,6,7,5,4,5,3,0,1,-1,6,7,5,-1,7,-2,3,4,2,4,5,3,2,6,1,4,5,3,5,6,4,6,4,2,2,3,1,6,7,5,1,7,0,4,5,3,5,6,4,3,7,2,5,6,4,6,7,5,7,5,3,6,7,5,4,5,3,7,3,1,5,6,4,6,7,5,4,7,3,3,4,2,4,5,3,5,3,1,6,7,5,2,3,1,7,1,-1,4,5,3,5,6,1,3,4,2,5,6,4,6,7,5,4,5,3,3,4,2,6,7,5,2,7,1,2,3,1,3,4,2,1,5,0,3,4,2,4,5,3,5,3,1,1,5,3,2,3,1,5,1,-1,5,6,4,6,7,5,4,7,3,1,2,0,2,3,1,3,1,-1,6,7,5,0,1,-1,7,-1,-3,3,4,2,4,5,0,2,3,1,4,5,3,5,6,1,3,1,-1,2,3,1,3,4,2,1,4,0,4,5,3,5,6,1,3,4,2,5,6,4,6,7,5,4,5,3,3,4,2,1,5,3,4,3,1,2,3,1,3,4,-1,1,2,0,5,6,4,6,7,5,4,5,3,1,2,0,6,7,5,0,7,-1,1,2,0,2,3,1,0,1,-1,2,3,1,3,4,2,1,2,0,0,1,-1,1,5,3,-1,5,-2,2,3,1,3,4,2,1,5,0,3,4,2,4,5,3,5,3,1,1,5,3,2,3,1,5,1,-1,3,1,-1,1,5,3,2,5,1,1,2,0,2,3,1,3,1,-1,-1,5,3,0,1,-1,5,-1,-3,4,5,3,5,6,1,3,4,2,5,6,4,6,7,5,4,5,3,3,4,2,6,7,5,2,7,1,0,1,-1,1,2,0,-1,3,-2,1,2,0,2,3,1,3,1,-1,-1,3,1,0,1,-1,3,-1,-3,5,6,4,6,7,5,4,7,3,-1,0,-2,0,1,-1,1,-1,-3,6,7,5,-2,-1,-3,7,-3,-5,-1,0,-2,0,1,-1,-2,2,-3,0,1,-1,1,2,0,2,0,-2,-2,-1,-3,2,3,-2,-3,3,-4,0,1,-1,1,2,0,-1,3,-2,1,2,0,2,3,1,3,1,-1,2,3,-2,0,1,-1,3,-1,-3,-2,-1,-3,-1,0,-2,-3,1,-4,2,3,1,3,4,-1,1,-1,-3,-3,-2,-4,3,4,-3,-4,4,-5,0,1,-1,1,2,0,-1,3,-2,1,2,0,2,3,1,3,1,-1,-1,0,-2,3,4,-1,-2,4,-3,1,2,0,2,3,1,0,4,-1,2,3,1,3,4,2,4,2,0,3,4,-1,1,2,0,4,0,-2,2,3,1,3,4,-1,-2,4,-3,0,1,-1,1,2,0,-1,0,-2,3,4,-3,-1,0,-2,4,-2,-4,-2,-1,-3,-1,0,-2,-3,1,-4,-1,0,-2,0,1,-1,1,-1,-3,-3,-2,-4,-2,2,0,-4,2,-5,-1,0,-2,0,1,-1,-2,2,-3,0,1,-1,1,5,3,2,3,1,1,2,0,-1,3,1,2,1,-1,-3,-2,-4,-2,-1,-3,-4,0,-5,-2,-1,-3,-1,5,3,2,3,1,-4,-3,-5,-3,5,3,-5,5,-6,0,1,-1,1,2,0,-1,0,-2,1,2,0,2,3,1,0,1,-1,-1,0,-2,0,1,-1,-2,1,-3,1,2,0,2,3,1,0,1,-1,2,3,1,3,4,2,1,2,0,0,1,-1,1,2,0,1,0,-2,-1,0,-2,0,1,-1,-2,-1,-3,0,1,-1,1,5,3,2,3,1,-2,-1,-3,-1,5,3,-3,5,-4,1,2,0,2,3,1,0,1,-1,2,3,1,3,4,2,1,2,0,0,1,-1,1,5,3,-1,5,-2,2,3,1,3,4,2,1,5,0,3,4,2,4,5,3,5,3,1,1,5,3,2,3,1,5,1,-1,0,1,-1,1,5,3,2,5,1,1,2,0,2,3,1,3,1,-1,-1,5,3,0,1,-1,5,-1,-3,-1,0,-2,0,1,-1,-2,2,-3,0,1,-1,1,5,3,2,3,1,1,2,0,-1,5,3,0,5,-1,0,1,-1,1,2,0,-1,3,-2,1,2,0,2,3,1,3,1,-1,-1,3,1,0,1,-1,3,-1,-3,-2,-1,-3,-1,5,3,2,5,1,-1,0,-2,0,1,-1,1,-1,-3,-3,5,3,-2,-1,-3,5,-3,-5,-2,-1,-3,-1,0,-2,-3,1,-4,-1,0,-2,0,1,-1,1,-1,-3,-3,-2,-4,1,2,-3,-4,2,-5,-1,0,-2,0,1,-1,-2,2,-3,0,1,-1,1,2,0,2,0,-2,1,2,-3,-1,0,-2,2,-2,-4,-3,-2,-4,-2,-1,-3,-4,0,-5,-2,-1,-3,-1,3,1,0,1,-1,-4,-3,-5,-3,3,1,-5,3,-6,-1,0,-2,0,1,-1,-2,-1,-3,0,1,-1,1,2,0,-1,0,-2,-2,-1,-3,-1,3,1,-3,3,-4,0,1,-1,1,2,0,-1,3,-2,1,2,0,2,3,1,3,1,-1,-1,3,1,0,1,-1,3,-1,-3,-2,-1,-3,-1,3,1,0,3,-1,-1,0,-2,0,1,-1,1,-1,-3,-3,3,1,-2,-1,-3,3,-3,-5,-3,-2,-4,-2,-1,-3,-4,0,-5,-2,-1,-3,-1,0,-2,0,-2,-4,-4,-3,-5,-3,1,-1,-5,1,-6,-2,-1,-3,-1,0,-2,-3,1,-4,-1,0,-2,0,1,-1,1,-1,-3,-3,1,-1,-2,-1,-3,1,-3,-5,-4,-3,-5,-3,-2,-4,-5,-1,-6,-3,-2,-4,-2,-1,-3,-1,-3,-5,-5,-4,-6,-4,-3,-5,-6,-5,-7,\n0,2,0,2,3,0,0,2,-2,2,2,0,2,4,1,2,2,-1,0,1,-2,2,4,0,-1,4,-2,2,2,0,2,4,1,0,4,-1,2,4,1,4,4,2,4,2,0,2,4,-1,2,2,0,4,0,-2,0,1,-2,1,2,0,-1,2,-2,2,4,1,3,4,0,2,2,-2,-1,0,-2,3,4,-2,-2,4,-4,2,2,0,2,4,1,1,4,0,2,4,1,4,4,2,4,2,0,0,2,0,3,4,0,0,4,-2,2,4,2,4,4,2,2,4,0,4,4,2,4,6,3,4,4,1,3,4,0,2,4,2,4,2,-1,2,4,1,3,4,0,0,4,-2,2,2,0,2,4,2,2,2,0,3,4,-2,0,2,0,4,0,-3,0,1,-2,0,2,-1,-1,2,-2,0,2,0,2,3,0,2,0,-2,-1,0,-2,0,3,0,-2,3,-4,2,4,2,3,4,0,2,3,0,4,4,2,4,6,2,3,4,0,0,3,0,0,4,2,3,2,-2,-2,0,-2,0,1,-2,-2,1,-4,4,4,2,4,6,0,1,4,-2,-2,-1,-4,4,6,-2,-3,6,-4,2,2,0,2,4,1,1,4,0,2,4,1,4,4,2,4,2,0,0,2,0,3,4,0,0,4,-2,2,4,2,4,4,2,2,4,0,4,4,2,4,6,3,4,4,1,3,4,0,2,4,2,4,2,-1,0,2,0,2,2,0,0,2,-2,4,4,2,4,6,2,2,4,0,0,0,-2,4,6,0,-2,6,-2,2,4,2,4,4,2,2,4,0,4,4,2,4,6,3,4,4,1,2,2,0,4,6,2,0,6,0,4,4,2,4,6,3,2,6,2,4,6,4,6,6,4,6,4,2,4,6,2,4,4,2,6,2,0,4,4,2,4,6,1,0,6,0,2,4,2,4,4,2,4,2,0,4,6,0,2,2,0,6,0,-2,2,4,2,3,4,0,2,2,0,4,4,2,4,6,1,0,4,-1,0,1,-2,4,6,0,-2,6,-2,2,2,0,2,4,2,0,4,0,2,4,2,4,4,2,4,2,0,0,4,2,2,2,0,4,0,-2,4,4,2,4,6,-1,-2,6,-2,0,2,0,2,2,0,2,0,-2,4,6,-2,0,0,-2,6,-2,-4,0,1,-1,0,2,-1,-1,2,-2,0,2,0,2,2,0,2,0,-2,-1,0,-2,2,2,-1,-2,2,-4,0,2,0,2,2,0,0,2,-2,2,2,0,2,4,2,2,2,0,2,2,-2,0,2,0,2,0,-2,-1,0,-2,0,1,-2,-2,1,-4,0,2,-2,1,4,2,1,2,0,-2,-1,-4,-1,4,2,-3,4,-4,2,3,1,3,4,0,1,2,0,3,4,2,4,6,2,2,2,0,2,2,0,1,4,2,0,4,0,3,4,2,4,6,2,2,4,2,4,6,4,6,6,2,4,2,0,0,4,2,2,2,0,4,0,-2,0,2,-2,0,4,2,0,4,0,0,2,0,2,2,0,2,0,-2,-2,4,2,0,0,-2,4,-2,-4,-1,0,-2,0,0,-2,-2,0,-4,0,0,-2,0,2,0,0,0,-2,-2,-1,-4,-1,2,0,-3,2,-4,3,4,2,4,6,2,2,4,2,4,6,4,6,6,0,2,0,-2,-2,2,0,0,0,-2,2,-2,-4,-2,-2,-4,-2,0,-2,-3,0,-4,4,6,4,6,6,-2,0,-2,-4,-4,-2,-4,6,6,-4,-4,6,-6,2,3,0,2,4,1,0,3,0,2,4,1,3,4,2,3,2,0,0,2,0,3,4,0,0,4,-2,2,4,2,3,4,2,2,4,0,4,4,2,4,6,3,4,4,1,3,4,0,2,4,2,4,2,-1,0,2,0,2,2,0,0,2,-2,3,4,2,4,6,2,2,2,0,0,1,-2,4,6,0,-1,6,-2,2,4,2,3,4,2,2,4,0,4,4,2,4,6,3,4,3,1,2,2,0,4,6,2,0,6,0,4,4,2,4,6,3,2,6,2,4,6,4,6,6,4,6,4,2,4,6,2,3,4,2,6,2,0,3,4,2,4,6,1,2,6,0,2,3,1,3,4,2,2,2,0,4,6,0,1,2,0,6,0,-2,1,2,0,2,2,0,0,2,-2,2,2,0,2,4,2,2,2,0,0,0,-2,0,4,2,-1,4,-2,3,4,2,4,6,2,2,4,2,4,6,4,6,6,2,4,2,0,0,4,2,2,2,0,4,0,-2,0,0,-2,0,2,0,-2,2,-2,4,6,4,6,6,0,2,0,-2,-2,0,-2,6,6,-2,-2,6,-4,2,4,2,3,4,2,2,4,0,4,4,2,4,6,3,4,4,1,2,2,0,4,6,2,0,6,0,4,4,2,4,6,3,2,6,2,4,6,4,6,6,4,6,4,2,4,6,2,3,4,2,6,2,0,2,2,0,2,4,2,0,4,0,4,6,4,6,6,2,4,2,0,0,2,0,6,6,0,0,6,-2,4,4,2,4,6,3,2,6,2,4,6,4,6,6,4,6,4,2,2,4,2,6,6,2,2,6,0,4,6,4,6,6,4,4,6,2,6,6,4,6,8,6,6,6,4,6,6,2,4,6,4,6,4,2,4,6,4,6,6,2,2,6,0,4,4,2,4,6,4,2,4,2,6,6,0,2,4,2,6,2,0,3,4,2,4,6,2,2,4,2,4,6,4,6,6,2,2,2,0,1,2,0,6,6,0,0,6,-2,2,4,2,3,4,2,2,2,0,4,4,2,4,6,4,2,4,2,2,2,0,2,4,2,0,2,0,4,6,4,6,6,0,0,6,-2,2,2,0,2,4,2,0,2,0,6,6,-2,0,2,0,6,0,-2,2,3,1,3,4,0,1,2,0,3,4,2,4,6,1,2,2,0,2,2,0,0,4,2,0,2,0,3,4,2,4,6,2,2,4,2,4,6,4,6,6,2,2,2,0,1,2,0,1,2,0,2,0,-2,0,1,-1,0,2,0,-1,2,-2,4,6,4,6,6,0,2,0,-2,-1,0,-2,6,6,-2,-2,6,-4,2,2,0,2,4,1,0,2,0,2,3,1,3,4,2,2,2,0,0,2,0,1,2,0,0,2,-2,2,4,2,3,4,2,2,2,0,4,4,2,4,6,4,2,4,2,2,2,0,2,4,2,2,2,0,0,2,0,2,2,0,2,2,-2,2,2,0,2,4,2,0,2,0,0,2,0,0,2,0,2,0,-2,3,4,2,4,6,2,2,4,2,4,6,4,6,6,0,0,0,-2,-1,0,-2,6,6,-2,-2,6,-4,0,2,0,1,2,0,0,0,-2,2,2,0,2,4,2,0,2,0,0,0,-2,0,2,0,0,0,-2,4,6,4,6,6,-2,-2,6,-4,0,0,-2,0,2,0,-2,0,-2,6,6,-4,-2,0,-2,6,-2,-4,0,1,-1,0,2,0,-1,2,-2,1,2,0,2,3,0,2,0,-2,-1,0,-2,1,2,-1,-2,2,-3,1,2,0,2,2,0,0,2,-2,2,2,0,2,4,1,2,2,-1,1,2,-2,0,2,0,2,0,-2,-1,0,-2,0,1,-2,-2,1,-3,2,2,0,2,4,0,1,2,-2,-2,-1,-3,2,4,-2,-3,4,-4,0,2,0,2,2,0,0,2,-2,2,2,0,2,4,1,2,2,0,0,0,-2,2,4,0,-2,4,-2,2,2,0,2,4,2,0,4,0,2,4,2,4,4,2,4,2,0,2,4,0,2,2,0,4,0,-2,2,2,0,2,4,0,-1,4,-2,0,2,0,2,2,0,2,0,-2,2,4,-2,0,0,-2,4,-2,-4,-1,0,-2,0,1,-2,-2,0,-3,0,0,-2,0,2,0,0,0,-2,-2,-1,-3,-1,2,0,-3,2,-4,0,0,-2,2,4,0,-1,2,-2,0,4,0,2,4,2,2,2,0,0,2,0,2,2,0,2,0,-2,-2,-1,-3,-2,0,-2,-3,0,-4,-2,4,-2,0,4,2,2,2,0,-3,-2,-4,-2,4,2,-4,4,-6,2,4,2,3,4,0,2,3,0,4,4,2,4,6,1,0,4,0,2,2,0,2,4,2,0,4,0,4,4,2,4,6,2,2,4,2,4,6,4,6,6,2,4,2,0,2,4,2,2,2,0,4,0,-2,2,2,0,2,4,0,0,2,0,0,4,0,2,4,2,2,2,0,0,2,0,0,4,2,0,4,-2,4,4,2,4,6,2,2,4,2,4,6,4,6,6,2,4,2,0,2,4,2,2,4,2,2,4,0,4,6,4,6,6,2,4,4,2,6,6,4,6,8,6,4,6,4,4,4,2,2,6,4,4,4,2,3,4,2,4,4,2,2,4,0,4,2,0,2,6,4,2,4,2,2,4,2,0,4,2,4,2,0,2,3,1,2,4,2,1,2,0,2,4,2,4,4,2,2,2,0,1,2,0,2,4,2,0,4,-2,2,4,2,2,2,0,2,2,-2,4,2,0,2,6,4,2,4,2,2,2,0,0,4,2,2,2,0,1,4,0,2,4,2,2,4,0,2,0,-2,0,4,2,0,2,0,0,4,2,-2,2,0,4,0,-2,-1,0,-2,0,1,-1,-2,0,-3,0,1,-1,0,2,0,0,0,-2,-2,-1,-3,0,2,-2,-3,2,-4,0,0,-2,0,2,0,-2,2,-2,0,2,0,2,2,0,2,0,-2,0,2,-2,0,0,-2,2,-2,-4,-2,-1,-3,-1,0,-2,-3,0,-4,-2,2,-2,0,2,0,0,0,-2,-3,-2,-4,-2,2,0,-4,2,-6,4,4,2,4,6,2,2,4,2,4,6,4,6,6,0,4,2,0,2,4,2,2,4,2,2,2,0,4,6,4,6,6,2,4,4,2,6,6,4,6,8,6,4,6,4,4,4,2,2,6,4,2,4,2,3,4,2,4,4,0,2,2,0,4,2,0,0,6,4,2,4,2,2,2,0,0,4,2,2,2,0,-2,-1,-3,-1,0,-2,-3,0,-4,-2,0,-2,0,0,-2,0,-2,-4,-3,-2,-4,-2,0,-2,-4,0,-6,4,6,4,6,6,2,4,4,2,6,6,4,6,8,6,4,6,4,4,4,2,2,6,4,2,4,2,-3,-2,-4,-2,-2,-4,-4,-2,-6,6,6,4,6,8,6,4,6,4,-4,-4,-6,6,8,6,-6,8,-6,2,3,0,3,4,1,1,4,0,2,4,1,4,4,2,4,2,0,1,2,0,3,4,0,0,4,-2,2,4,2,4,4,2,2,4,0,4,4,2,4,6,3,4,4,1,3,4,0,2,4,2,4,2,-1,1,2,0,2,3,0,0,3,-2,4,4,2,4,6,2,3,4,0,0,1,-2,4,6,0,-1,6,-2,2,4,2,4,4,2,2,4,0,4,4,2,4,6,3,4,4,1,2,2,0,4,6,2,0,6,0,4,4,2,4,6,3,2,6,2,4,6,4,6,6,4,6,4,2,4,6,2,4,4,2,6,2,0,4,4,2,4,6,1,0,6,0,2,4,2,4,4,2,4,2,0,4,6,0,2,2,0,6,0,-2,1,2,0,2,3,0,0,2,-2,2,3,0,2,4,2,2,2,0,0,1,-2,1,4,2,-1,4,-2,4,4,2,4,6,2,2,4,2,4,6,4,6,6,2,4,2,0,2,4,2,2,2,0,4,0,-2,0,1,-2,0,2,0,-1,2,-2,4,6,4,6,6,0,4,0,-2,-2,0,-2,6,6,-2,-2,6,-4,2,4,2,4,4,2,2,4,0,4,4,2,4,6,3,4,4,1,2,2,0,4,6,2,1,6,0,4,4,2,4,6,3,2,6,2,4,6,4,6,6,4,6,4,2,4,6,2,3,4,2,6,2,0,2,3,0,2,4,2,0,4,0,4,6,4,6,6,2,4,2,0,0,2,0,6,6,0,0,6,-2,4,4,2,4,6,3,2,6,2,4,6,4,6,6,4,6,4,2,2,4,2,6,6,2,2,6,0,4,6,4,6,6,4,4,6,2,6,6,4,6,8,6,6,6,4,6,6,2,4,6,4,6,4,2,4,6,4,6,6,2,4,6,0,4,4,2,4,6,4,2,4,2,6,6,0,2,4,2,6,2,0,4,4,2,4,6,2,2,4,2,4,6,4,6,6,2,4,2,0,2,4,2,6,6,0,2,6,-2,2,4,2,3,4,2,2,2,0,4,4,2,4,6,4,2,4,2,2,2,0,2,4,2,2,2,0,4,6,4,6,6,0,4,6,-2,2,2,0,2,4,2,0,2,0,6,6,-2,0,2,0,6,0,-2,1,2,0,2,3,0,0,2,-1,2,2,0,2,4,1,2,2,0,0,1,-1,2,4,0,-1,4,-2,2,2,0,2,4,2,0,4,0,2,4,2,4,4,2,4,2,0,2,4,0,2,2,0,4,0,-2,0,1,-1,0,2,0,-1,2,-2,1,4,0,2,4,2,2,2,0,-1,0,-2,0,4,2,-2,4,-4,4,4,2,4,6,2,2,4,2,4,6,4,6,6,2,4,2,0,2,4,2,2,4,2,2,4,0,4,6,4,6,6,2,4,4,2,6,6,4,6,8,6,4,6,4,4,4,2,2,6,4,4,4,2,3,4,2,4,4,2,2,4,0,4,2,0,2,6,4,2,4,2,2,4,2,0,4,2,4,2,0,0,1,-1,1,2,0,-1,2,-2,0,2,0,2,2,0,2,0,-2,-1,0,-2,0,2,0,-2,2,-4,4,6,4,6,6,2,4,4,2,6,6,4,6,8,6,4,6,4,4,4,2,2,6,4,2,4,2,-1,0,-2,0,0,-2,-2,0,-4,6,6,4,6,8,6,4,6,4,-2,-2,-4,6,8,6,-4,8,-4,3,4,2,4,4,2,2,4,0,4,4,2,4,6,3,4,4,1,2,3,0,4,6,2,1,6,0,4,4,2,4,6,3,2,6,2,4,6,4,6,6,4,6,4,2,4,6,2,4,4,2,6,2,0,2,3,0,2,4,2,1,4,0,4,6,4,6,6,2,4,2,0,0,2,0,6,6,0,0,6,-2,4,4,2,4,6,3,2,6,2,4,6,4,6,6,4,6,4,2,2,4,2,6,6,2,2,6,0,4,6,4,6,6,4,4,6,2,6,6,4,6,8,6,6,6,4,6,6,2,4,6,4,6,4,2,4,6,4,6,6,2,4,6,0,4,4,2,4,6,4,2,4,2,6,6,0,2,4,2,6,2,0,2,3,1,2,4,2,1,4,0,2,4,2,4,4,2,4,2,0,1,2,0,2,4,2,0,4,-2,4,6,4,6,6,2,4,4,2,6,6,4,6,8,6,4,6,4,4,4,2,2,6,4,4,4,2,1,2,0,2,2,0,0,2,-2,6,6,4,6,8,6,4,6,4,0,0,-2,6,8,6,-2,8,-2,4,4,2,4,6,3,3,6,2,4,6,4,6,6,4,6,4,2,2,4,2,6,6,2,2,6,0,4,6,4,6,6,4,4,6,2,6,6,4,6,8,6,6,6,4,6,6,2,4,6,4,6,4,2,3,4,2,4,4,2,2,4,0,6,6,4,6,8,6,4,6,4,2,2,0,6,8,6,0,8,0,4,6,4,6,6,4,4,6,2,6,6,4,6,8,6,6,6,4,4,4,2,6,8,6,2,8,2,6,6,4,6,8,6,4,8,4,6,8,6,8,8,6,8,6,4,6,8,6,6,6,4,8,4,2,6,6,4,6,8,6,4,8,4,4,6,4,6,6,4,6,4,2,6,8,6,4,4,2,8,2,0,4,6,4,6,6,2,4,4,2,6,6,4,6,8,6,4,6,4,4,4,2,6,8,6,2,8,2,4,4,2,4,6,4,2,6,2,4,6,4,6,6,4,6,4,2,2,6,4,4,4,2,6,2,0,6,6,4,6,8,6,4,8,4,2,4,2,4,4,2,4,2,0,6,8,6,2,2,0,8,0,-2,4,4,2,4,6,2,2,4,2,4,6,4,6,6,2,4,2,0,2,4,2,4,4,2,2,4,0,4,6,4,6,6,2,4,4,2,6,6,4,6,8,6,4,6,4,4,4,2,2,6,4,4,4,2,3,4,2,4,4,0,2,2,0,6,6,4,6,8,6,4,6,4,2,2,0,6,8,6,0,8,0,2,4,2,4,4,2,2,2,0,4,4,2,4,6,4,2,4,2,2,2,0,2,6,4,0,6,0,4,4,2,4,6,4,2,6,2,4,6,4,6,6,4,6,4,2,2,6,4,4,4,2,6,2,0,4,2,0,2,6,4,2,6,2,2,4,2,4,4,2,4,2,0,0,6,4,2,2,0,6,0,-2,4,6,4,6,6,2,4,4,2,6,6,4,6,8,6,4,6,4,4,4,2,6,8,6,2,8,2,2,2,0,2,4,2,0,4,0,2,4,2,4,4,2,4,2,0,0,4,2,2,2,0,4,0,-2,6,6,4,6,8,6,4,8,4,0,2,0,2,2,0,2,0,-2,6,8,6,0,0,-2,8,-2,-4,2,4,2,3,4,0,2,3,0,4,4,2,4,6,1,3,4,0,2,2,0,2,4,2,0,4,0,4,4,2,4,6,2,2,4,2,4,6,4,6,6,2,4,2,0,2,4,2,2,2,0,4,0,-2,2,2,0,2,4,0,0,2,0,2,4,2,4,4,2,2,2,0,0,2,0,4,4,0,0,4,-2,4,4,2,4,6,2,2,4,2,4,6,4,6,6,2,4,2,0,2,4,2,4,4,2,2,4,0,4,6,4,6,6,2,4,4,2,6,6,4,6,8,6,4,6,4,4,4,2,2,6,4,4,4,2,3,4,2,4,4,0,2,4,0,4,2,0,2,6,4,2,4,2,4,4,0,0,4,2,4,2,0,2,3,1,2,4,2,1,2,0,2,4,2,4,4,0,2,0,-2,1,2,0,2,2,0,0,2,-2,4,6,4,6,6,2,4,4,2,6,6,4,6,8,6,4,6,4,4,4,2,2,6,4,2,4,2,1,2,0,2,2,-2,0,0,-2,6,6,4,6,8,6,4,6,4,0,0,-2,6,8,6,-2,8,-2,2,2,0,2,4,1,0,4,0,2,4,1,4,4,2,4,2,0,0,2,0,2,2,0,0,2,-2,2,4,2,3,4,2,2,2,0,4,4,2,4,6,4,2,4,2,2,2,0,2,4,2,2,2,0,0,2,0,2,2,0,0,0,-2,4,2,0,2,6,4,2,4,2,0,0,-2,0,6,4,-2,6,-2,2,4,2,4,4,2,2,2,0,4,4,2,4,6,4,2,4,2,2,2,0,2,6,4,0,6,0,4,4,2,4,6,4,2,6,2,4,6,4,6,6,4,6,4,2,2,6,4,4,4,2,6,2,0,4,2,0,2,6,4,2,6,2,2,4,2,4,4,2,4,2,0,0,6,4,2,2,0,6,0,-2,2,4,2,2,2,0,2,2,-2,4,2,0,2,6,4,2,4,2,2,2,0,0,6,4,0,6,0,2,2,0,2,4,2,0,4,0,2,4,2,4,4,2,4,2,0,0,4,2,2,2,0,4,0,-2,4,0,-2,0,6,4,2,6,2,0,2,0,2,2,0,2,0,-2,-2,6,4,0,0,-2,6,-2,-4,4,4,2,4,6,2,2,4,2,4,6,4,6,6,0,4,2,0,2,4,2,2,4,2,2,2,0,4,6,4,6,6,2,4,4,2,6,6,4,6,8,6,4,6,4,4,4,2,2,6,4,2,4,2,3,4,2,4,4,0,2,2,0,6,6,4,6,8,6,4,6,4,2,2,0,6,8,6,0,8,0,0,2,0,2,2,0,0,0,-2,2,2,0,2,4,2,0,2,0,0,0,-2,0,4,2,-2,4,-2,2,2,0,2,4,2,0,4,0,2,4,2,4,4,2,4,2,0,0,4,2,2,2,0,4,0,-2,2,0,-2,0,4,2,0,4,0,0,2,0,2,2,0,2,0,-2,-2,4,2,0,0,-2,4,-2,-4,4,6,4,6,6,2,4,4,2,6,6,4,6,8,6,4,6,4,4,4,2,6,8,6,2,8,2,0,0,-2,0,2,0,-2,2,-2,0,2,0,2,2,0,2,0,-2,-2,2,0,0,0,-2,2,-2,-4,6,6,4,6,8,6,4,8,4,-2,0,-2,0,0,-2,0,-2,-4,6,8,6,-2,-2,-4,8,-4,-6,0,0,-2,0,2,-1,-1,2,-3,0,2,-1,2,2,0,2,0,-2,-1,0,-2,1,2,-2,-2,2,-4,0,2,-1,2,2,0,0,2,-2,2,2,0,2,4,1,2,2,-1,1,2,-2,0,2,0,2,0,-3,-2,0,-2,0,1,-2,-2,1,-4,2,2,0,2,4,0,1,2,-2,-2,-1,-4,2,4,-2,-3,4,-4,0,2,-1,2,2,0,0,2,-2,2,2,0,2,4,1,2,2,-1,0,0,-2,2,4,0,-2,4,-2,2,2,0,2,4,1,0,4,0,2,4,2,4,4,2,4,2,0,2,4,-1,2,2,0,4,0,-2,2,2,0,2,4,-1,-2,4,-3,0,2,0,2,2,0,2,0,-2,2,4,-3,0,0,-2,4,-2,-4,-2,0,-2,0,0,-2,-2,0,-4,0,0,-2,0,2,0,0,0,-2,-2,-1,-4,-1,2,0,-3,2,-4,1,2,0,2,4,0,0,2,0,2,4,2,4,4,0,2,0,-2,-2,2,0,0,0,-2,2,-2,-4,-2,-2,-4,-2,0,-2,-3,0,-4,2,4,2,4,4,-2,0,-2,-4,-4,-2,-4,4,4,-4,-4,4,-6,0,1,-1,1,2,0,0,2,-2,1,2,0,2,4,1,2,1,-1,0,0,-2,2,4,0,-1,4,-2,1,2,0,2,4,1,0,4,0,2,4,2,4,4,2,4,2,0,2,4,-1,1,2,0,4,0,-2,0,0,-2,0,2,0,-2,2,-2,2,4,2,4,4,0,2,0,-2,-2,0,-2,4,4,-2,-2,4,-4,1,2,0,2,4,1,0,4,0,2,4,2,4,4,2,4,2,0,0,2,0,4,4,0,0,4,-2,2,4,2,4,4,2,2,4,0,4,4,2,4,6,4,4,4,2,4,4,0,2,4,2,4,2,0,2,4,2,4,4,0,0,4,-2,2,2,0,2,4,2,0,2,0,4,4,-2,0,2,0,4,0,-2,1,2,0,2,4,0,0,2,0,2,4,2,4,4,0,0,0,-2,-2,0,-2,4,4,-2,-2,4,-4,0,2,0,1,2,0,0,0,-2,2,2,0,2,4,2,0,2,0,0,0,-2,0,2,0,0,0,-2,2,4,2,4,4,-2,-2,4,-4,0,0,-2,0,2,0,-2,0,-2,4,4,-4,-2,0,-2,4,-2,-4,-2,0,-2,0,0,-2,-2,0,-4,0,0,-2,0,2,-1,0,0,-2,-2,-1,-4,0,2,-2,-3,2,-4,0,0,-2,0,2,0,-2,2,-2,0,2,0,2,2,0,2,0,-2,0,2,-2,0,0,-2,2,-2,-4,-2,-2,-4,-2,0,-2,-3,0,-4,-2,2,-2,0,2,0,0,0,-2,-4,-2,-4,-2,2,0,-4,2,-6,-1,0,-2,0,2,-1,-2,2,-3,0,2,-1,2,2,0,2,0,-2,-2,0,-2,0,2,0,-2,2,-4,0,2,-1,2,2,0,0,2,-2,2,2,0,2,6,4,2,4,2,2,2,0,0,4,2,2,2,0,0,2,0,2,2,0,0,2,-2,2,0,-2,0,4,2,0,2,0,0,2,0,-2,2,0,2,0,-2,-2,-2,-4,-2,0,-2,-3,0,-4,-2,0,-2,0,0,-2,0,-2,-4,-4,-2,-4,-2,0,-2,-4,0,-6,-2,0,-3,0,0,-2,-2,0,-4,0,0,-2,0,6,4,2,4,2,2,2,0,0,4,2,0,2,0,-4,-2,-4,-2,-2,-4,-4,-2,-6,-2,-2,-4,-2,6,4,2,4,2,-4,-4,-6,-4,6,4,-6,6,-6,0,1,-1,1,2,0,0,0,-2,1,2,0,2,3,1,0,1,-1,-1,0,-2,0,2,0,-1,2,-3,1,2,0,2,3,1,0,2,-1,2,3,1,3,4,2,2,2,0,0,2,-1,1,2,0,2,0,-2,-1,0,-2,0,2,0,-2,2,-2,0,2,0,2,2,0,2,0,-2,-2,0,-2,2,2,-2,-2,2,-4,1,2,0,2,3,1,0,2,-1,2,3,1,3,4,2,2,2,0,0,2,0,2,2,0,0,2,-2,2,3,1,3,4,2,2,2,0,3,4,2,4,6,4,2,4,2,2,2,0,2,4,2,2,2,0,0,2,0,2,2,0,0,2,-2,2,2,0,2,4,2,0,2,0,2,2,-2,0,2,0,2,0,-2,0,0,-2,0,2,0,-2,0,-2,0,2,0,2,2,0,0,0,-2,-2,0,-2,0,0,-2,-2,0,-4,0,1,-1,1,2,0,0,0,-2,1,2,0,2,6,4,2,4,2,2,2,0,0,4,2,0,2,0,-2,0,-2,0,0,-2,-2,-2,-4,-1,0,-2,0,6,4,2,4,2,-2,-2,-4,-2,6,4,-4,6,-4,1,2,0,2,3,1,0,1,-1,2,3,1,3,4,2,1,2,0,0,1,-1,1,2,0,0,0,-2,2,3,1,3,4,2,1,2,0,3,4,2,4,6,4,2,4,2,2,2,0,2,4,2,0,2,0,0,2,0,2,2,0,0,0,-2,1,2,0,2,6,4,2,4,2,0,0,-2,0,6,4,-2,6,-2,2,3,1,3,4,2,1,2,0,3,4,2,4,6,4,2,4,2,2,2,0,2,6,4,0,6,0,3,4,2,4,6,4,2,6,2,4,6,4,6,6,4,6,4,2,2,6,4,4,4,2,6,2,0,2,2,0,2,6,4,2,6,2,2,4,2,4,4,2,4,2,0,0,6,4,2,2,0,6,0,-2,0,2,0,2,2,0,0,2,-2,2,2,0,2,6,4,2,4,2,2,2,0,0,6,4,0,6,0,2,2,0,2,4,2,0,4,0,2,4,2,4,4,2,4,2,0,0,4,2,2,2,0,4,0,-2,0,0,-2,0,6,4,2,6,2,0,2,0,2,2,0,2,0,-2,-2,6,4,0,0,-2,6,-2,-4,0,0,-2,0,2,0,-1,2,-2,0,2,0,2,2,0,2,0,-2,-1,0,-2,2,2,-2,-2,2,-4,0,2,0,2,2,0,0,2,-2,2,2,0,2,6,4,2,4,2,2,2,0,0,4,2,2,2,0,0,2,0,2,2,-2,0,0,-2,0,0,-2,0,6,4,2,4,2,0,0,-2,-2,6,4,-2,6,-2,0,2,0,2,2,0,0,0,-2,2,2,0,2,4,2,0,2,0,0,0,-2,0,4,2,-2,4,-2,2,2,0,2,4,2,0,4,0,2,4,2,4,4,2,4,2,0,0,4,2,2,2,0,4,0,-2,2,0,-2,0,4,2,0,4,0,0,2,0,2,2,0,2,0,-2,-2,4,2,0,0,-2,4,-2,-4,-2,0,-2,0,0,-2,-2,0,-4,0,0,-2,0,6,4,2,4,2,2,2,0,-2,6,4,0,6,0,0,0,-2,0,2,0,-2,2,-2,0,2,0,2,2,0,2,0,-2,-2,2,0,0,0,-2,2,-2,-4,-2,-2,-4,-2,6,4,2,6,2,-2,0,-2,0,0,-2,0,-2,-4,-4,6,4,-2,-2,-4,6,-4,-6,-2,0,-3,0,0,-2,-2,0,-4,0,0,-2,0,2,-1,0,0,-3,-2,-1,-4,0,2,-2,-3,2,-4,0,0,-2,0,2,-1,-2,2,-2,0,2,0,2,2,0,2,0,-2,0,2,-3,0,0,-2,2,-2,-4,-2,-2,-4,-2,0,-2,-3,0,-4,0,2,0,2,2,-2,0,-2,-4,-4,-2,-4,2,2,-4,-4,2,-6,-1,0,-2,0,2,-1,-2,2,-2,0,2,0,2,2,0,2,0,-2,-2,0,-2,2,2,-2,-2,2,-4,0,2,0,2,2,0,0,2,-2,2,2,0,2,4,2,2,2,0,2,2,-2,0,2,0,2,0,-2,0,2,0,2,2,-2,-2,2,-4,0,0,-2,0,2,0,-2,0,-2,2,2,-4,-2,0,-2,2,-2,-4,-2,-2,-4,-2,0,-2,-3,0,-4,-2,0,-2,0,0,-2,0,-2,-4,-4,-2,-4,-2,0,-2,-4,0,-6,-2,0,-3,0,0,-2,-2,0,-4,0,0,-2,0,4,2,0,2,0,0,0,-2,-2,2,0,0,0,-2,-4,-2,-4,-2,-2,-4,-4,-2,-6,-2,-2,-4,-2,4,2,0,2,0,-4,-4,-6,-4,4,2,-6,4,-6,-1,0,-2,0,1,-1,-2,0,-3,0,1,-1,1,2,0,0,0,-2,-2,0,-2,0,0,-2,-2,0,-4,0,1,-1,1,2,0,0,0,-2,1,2,0,2,4,2,0,2,0,0,0,-2,0,2,0,0,0,-2,-2,0,-2,0,0,-2,-2,-2,-4,-1,0,-2,0,4,2,0,2,0,-2,-2,-4,-2,4,2,-4,4,-4,0,1,-1,1,2,0,-1,0,-2,1,2,0,2,4,2,0,2,0,0,0,-2,0,4,2,-2,4,-2,1,2,0,2,4,2,0,4,0,2,4,2,4,4,2,4,2,0,0,4,2,2,2,0,4,0,-2,0,0,-2,0,4,2,0,4,0,0,2,0,2,2,0,2,0,-2,-2,4,2,0,0,-2,4,-2,-4,-2,0,-2,0,0,-2,-2,0,-4,0,0,-2,0,4,2,0,2,0,0,0,-2,-2,4,2,-2,4,-2,0,0,-2,0,2,0,-2,2,-2,0,2,0,2,2,0,2,0,-2,-2,2,0,0,0,-2,2,-2,-4,-2,-2,-4,-2,4,2,0,4,0,-2,0,-2,0,0,-2,0,-2,-4,-4,4,2,-2,-2,-4,4,-4,-6,-2,-2,-4,-2,0,-3,-3,0,-4,-2,0,-2,0,0,-2,0,-2,-4,-4,-2,-4,0,0,-4,-4,0,-6,-2,0,-2,0,0,-2,-2,0,-4,0,0,-2,0,2,0,0,0,-2,0,0,-4,-2,0,-2,0,-2,-4,-4,-2,-4,-2,-2,-4,-4,-2,-6,-2,-2,-4,-2,2,0,-2,0,-2,-4,-4,-6,-4,2,0,-6,2,-6,-2,-1,-3,-1,0,-2,-2,-2,-4,-1,0,-2,0,2,0,-2,0,-2,-2,-2,-4,-2,2,0,-4,2,-4,-1,0,-2,0,2,0,-2,2,-2,0,2,0,2,2,0,2,0,-2,-2,2,0,0,0,-2,2,-2,-4,-2,-2,-4,-2,2,0,-2,2,-2,-2,0,-2,0,0,-2,0,-2,-4,-4,2,0,-2,-2,-4,2,-4,-6,-4,-2,-4,-2,-2,-4,-4,-2,-6,-2,-2,-4,-2,0,-2,-2,-2,-4,-4,-4,-6,-4,0,-2,-6,0,-6,-3,-2,-4,-2,0,-2,-4,0,-4,-2,0,-2,0,0,-2,0,-2,-4,-4,0,-2,-2,-2,-4,0,-4,-6,-4,-4,-6,-4,-2,-4,-6,-2,-6,-4,-2,-4,-2,-2,-4,-2,-4,-6,-6,-4,-6,-4,-4,-6,-6,-6,-8,\n0,1,-1,1,2,0,-1,3,-2,1,2,0,2,3,1,3,1,-1,-1,0,-2,3,4,-1,-2,4,-3,1,2,0,2,3,1,0,4,-1,2,3,1,3,4,2,4,2,0,3,4,-1,1,2,0,4,0,-2,-1,0,-2,0,1,-1,-2,2,-3,3,4,2,4,5,0,2,3,-2,-2,-1,-3,4,5,-2,-3,5,-4,1,2,0,2,3,1,0,4,-1,2,3,1,3,4,2,4,2,0,0,1,-1,4,5,0,-1,5,-2,2,3,1,3,4,2,1,5,0,3,4,2,4,5,3,5,3,1,4,5,0,2,3,1,5,1,-1,3,4,2,4,5,0,-1,5,-2,1,2,0,2,3,1,3,1,-1,4,5,-2,0,1,-1,5,-1,-3,-1,0,-2,0,1,-1,-2,2,-3,0,1,-1,1,2,0,2,0,-2,-2,-1,-3,-1,3,1,-3,3,-4,3,4,2,4,5,0,2,3,1,4,5,3,5,6,1,3,4,-1,-1,3,1,0,4,2,3,2,-3,-2,-1,-3,-1,0,-2,-3,1,-4,4,5,3,5,6,-1,1,4,-3,-3,-2,-4,5,6,-3,-4,6,-5,1,2,0,2,3,1,0,4,-1,2,3,1,3,4,2,4,2,0,0,1,-1,4,5,0,-1,5,-2,2,3,1,3,4,2,1,5,0,3,4,2,4,5,3,5,3,1,4,5,0,2,3,1,5,1,-1,0,1,-1,1,2,0,-1,3,-2,4,5,3,5,6,1,3,4,-1,-1,0,-2,5,6,-1,-2,6,-3,2,3,1,3,4,2,1,5,0,3,4,2,4,5,3,5,3,1,1,2,0,5,6,1,0,6,-1,3,4,2,4,5,3,2,6,1,4,5,3,5,6,4,6,4,2,5,6,1,3,4,2,6,2,0,4,5,3,5,6,1,0,6,-1,2,3,1,3,4,2,4,2,0,5,6,-1,1,2,0,6,0,-2,3,4,2,4,5,0,2,3,1,4,5,3,5,6,1,0,4,-1,-1,0,-2,5,6,-1,-2,6,-3,1,2,0,2,3,1,0,4,-1,2,3,1,3,4,2,4,2,0,0,4,2,1,2,0,4,0,-2,4,5,3,5,6,-1,-2,6,-3,0,1,-1,1,2,0,2,0,-2,5,6,-3,-1,0,-2,6,-2,-4,-1,0,-2,0,1,-1,-2,2,-3,0,1,-1,1,2,0,2,0,-2,-2,-1,-3,2,3,-2,-3,3,-4,0,1,-1,1,2,0,-1,3,-2,1,2,0,2,3,1,3,1,-1,2,3,-2,0,1,-1,3,-1,-3,-2,-1,-3,-1,0,-2,-3,1,-4,-1,3,-2,0,4,2,1,2,0,-3,-2,-4,-2,4,2,-4,4,-5,3,4,2,4,5,0,2,3,1,4,5,3,5,6,1,3,1,-1,2,3,1,0,4,2,1,4,0,4,5,3,5,6,1,3,4,2,5,6,4,6,7,2,4,2,0,0,4,2,1,2,0,4,0,-2,-1,3,-2,0,4,2,1,4,0,0,1,-1,1,2,0,2,0,-2,-2,4,2,-1,0,-2,4,-2,-4,-2,-1,-3,-1,0,-2,-3,1,-4,-1,0,-2,0,1,-1,1,-1,-3,-3,-2,-4,-2,2,0,-4,2,-5,4,5,3,5,6,1,3,4,2,5,6,4,6,7,0,2,0,-2,-2,2,0,-1,0,-2,2,-2,-4,-3,-2,-4,-2,-1,-3,-4,0,-5,5,6,4,6,7,-2,0,-2,-4,-4,-3,-5,6,7,-4,-5,7,-6,1,2,0,2,3,1,0,4,-1,2,3,1,3,4,2,4,2,0,0,1,-1,4,5,0,-1,5,-2,2,3,1,3,4,2,1,5,0,3,4,2,4,5,3,5,3,1,4,5,0,2,3,1,5,1,-1,0,1,-1,1,2,0,-1,3,-2,4,5,3,5,6,1,3,1,-1,-1,0,-2,5,6,-1,-2,6,-3,2,3,1,3,4,2,1,5,0,3,4,2,4,5,3,5,3,1,1,2,0,5,6,1,0,6,-1,3,4,2,4,5,3,2,6,1,4,5,3,5,6,4,6,4,2,5,6,1,3,4,2,6,2,0,4,5,3,5,6,1,3,6,-1,2,3,1,3,4,2,1,2,0,5,6,-1,1,2,0,6,0,-2,0,1,-1,1,2,0,-1,3,-2,1,2,0,2,3,1,3,1,-1,-1,0,-2,0,4,2,-2,4,-3,4,5,3,5,6,1,3,4,2,5,6,4,6,7,2,4,2,0,0,4,2,1,2,0,4,0,-2,-1,0,-2,0,1,-1,-2,2,-3,5,6,4,6,7,0,2,0,-2,-2,-1,-3,6,7,-2,-3,7,-4,2,3,1,3,4,2,1,5,0,3,4,2,4,5,3,5,3,1,1,2,0,5,6,1,0,6,-1,3,4,2,4,5,3,2,6,1,4,5,3,5,6,4,6,4,2,5,6,1,3,4,2,6,2,0,1,2,0,2,3,1,0,4,-1,5,6,4,6,7,2,4,2,0,0,1,-1,6,7,0,-1,7,-2,3,4,2,4,5,3,2,6,1,4,5,3,5,6,4,6,4,2,2,3,1,6,7,2,1,7,0,4,5,3,5,6,4,3,7,2,5,6,4,6,7,5,7,5,3,6,7,2,4,5,3,7,3,1,5,6,4,6,7,2,1,7,0,3,4,2,4,5,3,2,3,1,6,7,0,2,3,1,7,1,-1,4,5,3,5,6,1,3,4,2,5,6,4,6,7,2,1,2,0,0,1,-1,6,7,0,-1,7,-2,2,3,1,3,4,2,1,2,0,3,4,2,4,5,3,2,3,1,1,2,0,2,3,1,0,1,-1,5,6,4,6,7,0,-1,7,-2,1,2,0,2,3,1,0,1,-1,6,7,-2,0,1,-1,7,-1,-3,3,4,2,4,5,0,2,3,1,4,5,3,5,6,1,3,1,-1,2,3,1,0,4,2,1,2,0,4,5,3,5,6,1,3,4,2,5,6,4,6,7,2,1,2,0,0,1,-1,1,2,0,1,0,-2,-1,0,-2,0,1,-1,-2,2,-3,5,6,4,6,7,0,2,0,-2,-2,-1,-3,6,7,-2,-3,7,-4,1,2,0,2,3,1,0,1,-1,2,3,1,3,4,2,1,2,0,0,1,-1,1,2,0,-1,2,-2,2,3,1,3,4,2,1,2,0,3,4,2,4,5,3,2,3,1,1,2,0,2,3,1,2,1,-1,0,1,-1,1,2,0,2,2,-2,1,2,0,2,3,1,0,1,-1,-1,2,0,0,1,-1,2,-1,-3,4,5,3,5,6,1,3,4,2,5,6,4,6,7,0,-1,0,-2,-2,-1,-3,6,7,-2,-3,7,-4,0,1,-1,1,2,0,-1,0,-2,1,2,0,2,3,1,0,1,-1,-1,0,-2,0,1,-1,0,-1,-3,5,6,4,6,7,-2,-3,7,-4,-1,0,-2,0,1,-1,-2,-1,-3,6,7,-4,-2,-1,-3,7,-3,-5,-1,0,-2,0,1,-1,-2,2,-3,0,1,-1,1,2,0,2,0,-2,-2,-1,-3,2,3,-2,-3,3,-4,0,1,-1,1,2,0,-1,3,-2,1,2,0,2,3,1,3,1,-1,2,3,-2,0,1,-1,3,-1,-3,-2,-1,-3,-1,0,-2,-3,1,-4,2,3,1,3,4,-1,1,2,-3,-3,-2,-4,3,4,-3,-4,4,-5,0,1,-1,1,2,0,-1,3,-2,1,2,0,2,3,1,3,1,-1,-1,0,-2,3,4,-1,-2,4,-3,1,2,0,2,3,1,0,4,-1,2,3,1,3,4,2,4,2,0,3,4,-1,1,2,0,4,0,-2,2,3,1,3,4,-1,-2,4,-3,0,1,-1,1,2,0,2,0,-2,3,4,-3,-1,0,-2,4,-2,-4,-2,-1,-3,-1,0,-2,-3,1,-4,-1,0,-2,0,1,-1,1,-1,-3,-3,-2,-4,-2,2,0,-4,2,-5,-1,0,-2,3,4,-1,-2,2,-3,0,4,-1,1,5,3,2,3,1,1,2,0,2,3,1,2,1,-1,-3,-2,-4,-2,-1,-3,-4,0,-5,-2,4,-3,-1,5,3,2,3,1,-4,-3,-5,-3,5,3,-5,5,-6,3,4,2,4,5,0,2,3,1,4,5,3,5,6,1,0,4,-1,2,3,1,3,4,2,1,4,0,4,5,3,5,6,1,3,4,2,5,6,4,6,7,2,4,2,0,3,4,2,1,2,0,4,0,-2,2,3,1,3,4,-1,1,2,0,0,4,-1,1,5,3,2,3,1,1,2,0,-1,5,3,0,5,-1,4,5,3,5,6,1,3,4,2,5,6,4,6,7,2,4,2,0,3,4,2,1,5,3,2,5,1,5,6,4,6,7,2,4,5,3,6,7,5,7,8,6,5,6,4,4,5,3,2,6,4,5,4,2,3,4,2,4,5,3,2,5,1,4,2,0,2,6,4,3,4,2,2,5,3,0,4,2,5,2,0,2,3,1,3,4,2,1,2,0,3,4,2,4,5,3,2,3,1,1,2,0,2,5,3,0,5,-1,3,4,2,1,2,0,2,3,-2,4,2,0,2,6,4,3,4,2,2,3,1,0,4,2,3,2,0,1,4,0,2,5,3,2,5,1,2,0,-2,0,4,2,1,2,0,0,5,3,-2,2,0,5,0,-2,-2,-1,-3,-1,0,-2,-3,1,-4,-1,0,-2,0,1,-1,1,-1,-3,-3,-2,-4,1,2,-3,-4,2,-5,-1,0,-2,0,1,-1,-2,2,-3,0,1,-1,1,2,0,2,0,-2,1,2,-3,-1,0,-2,2,-2,-4,-3,-2,-4,-2,-1,-3,-4,0,-5,-2,2,-3,-1,3,1,0,1,-1,-4,-3,-5,-3,3,1,-5,3,-6,4,5,3,5,6,1,3,4,2,5,6,4,6,7,0,4,2,0,3,4,2,1,5,3,2,3,1,5,6,4,6,7,2,4,5,3,6,7,5,7,8,6,5,6,4,4,5,3,2,6,4,3,4,2,3,4,2,4,5,1,2,3,1,4,2,0,0,6,4,3,4,2,2,3,1,0,4,2,3,2,0,-3,-2,-4,-2,-1,-3,-4,0,-5,-2,-1,-3,-1,0,-2,0,-2,-4,-4,-3,-5,-3,1,-1,-5,1,-6,5,6,4,6,7,2,4,5,3,6,7,5,7,8,6,5,6,4,4,5,3,2,6,4,3,4,2,-4,-3,-5,-3,-2,-4,-5,-1,-6,6,7,5,7,8,6,5,6,4,-5,-4,-6,7,8,6,-6,8,-7,1,2,0,2,3,1,0,4,-1,2,3,1,3,4,2,4,2,0,0,1,-1,4,5,0,-1,5,-2,2,3,1,3,4,2,1,5,0,3,4,2,4,5,3,5,3,1,4,5,0,2,3,1,5,1,-1,0,1,-1,1,2,0,-1,3,-2,4,5,3,5,6,1,3,4,-1,-1,0,-2,5,6,-1,-2,6,-3,2,3,1,3,4,2,1,5,0,3,4,2,4,5,3,5,3,1,1,2,0,5,6,1,0,6,-1,3,4,2,4,5,3,2,6,1,4,5,3,5,6,4,6,4,2,5,6,1,3,4,2,6,2,0,4,5,3,5,6,1,0,6,-1,2,3,1,3,4,2,4,2,0,5,6,-1,1,2,0,6,0,-2,0,1,-1,1,2,0,-1,3,-2,1,2,0,2,3,1,3,1,-1,-1,0,-2,0,4,2,-2,4,-3,4,5,3,5,6,1,3,4,2,5,6,4,6,7,2,4,2,0,3,4,2,1,2,0,4,0,-2,-1,0,-2,0,1,-1,-2,2,-3,5,6,4,6,7,0,4,0,-2,-2,-1,-3,6,7,-2,-3,7,-4,2,3,1,3,4,2,1,5,0,3,4,2,4,5,3,5,3,1,1,2,0,5,6,1,0,6,-1,3,4,2,4,5,3,2,6,1,4,5,3,5,6,4,6,4,2,5,6,1,3,4,2,6,2,0,1,2,0,2,3,1,0,4,-1,5,6,4,6,7,2,4,2,0,0,1,-1,6,7,0,-1,7,-2,3,4,2,4,5,3,2,6,1,4,5,3,5,6,4,6,4,2,2,3,1,6,7,2,1,7,0,4,5,3,5,6,4,3,7,2,5,6,4,6,7,5,7,5,3,6,7,2,4,5,3,7,3,1,5,6,4,6,7,2,4,7,0,3,4,2,4,5,3,2,3,1,6,7,0,2,3,1,7,1,-1,4,5,3,5,6,1,3,4,2,5,6,4,6,7,2,4,2,0,3,4,2,6,7,0,2,7,-2,2,3,1,3,4,2,1,2,0,3,4,2,4,5,3,2,3,1,1,2,0,2,3,1,2,1,-1,5,6,4,6,7,0,4,7,-2,1,2,0,2,3,1,0,1,-1,6,7,-2,0,1,-1,7,-1,-3,0,1,-1,1,2,0,-1,3,-2,1,2,0,2,3,1,3,1,-1,-1,0,-2,3,4,-1,-2,4,-3,1,2,0,2,3,1,0,4,-1,2,3,1,3,4,2,4,2,0,3,4,-1,1,2,0,4,0,-2,-1,0,-2,0,1,-1,-2,2,-3,0,4,-1,1,5,3,2,3,1,-2,-1,-3,-1,5,3,-3,5,-4,4,5,3,5,6,1,3,4,2,5,6,4,6,7,2,4,2,0,3,4,2,1,5,3,2,5,1,5,6,4,6,7,2,4,5,3,6,7,5,7,8,6,5,6,4,4,5,3,2,6,4,5,4,2,3,4,2,4,5,3,2,5,1,4,2,0,2,6,4,3,4,2,2,5,3,0,4,2,5,2,0,-1,0,-2,0,1,-1,-2,2,-3,0,1,-1,1,2,0,2,0,-2,-2,-1,-3,-1,3,1,-3,3,-4,5,6,4,6,7,2,4,5,3,6,7,5,7,8,6,5,6,4,4,5,3,2,6,4,3,4,2,-2,-1,-3,-1,0,-2,-3,1,-4,6,7,5,7,8,6,5,6,4,-3,-2,-4,7,8,6,-4,8,-5,2,3,1,3,4,2,1,5,0,3,4,2,4,5,3,5,3,1,1,2,0,5,6,1,0,6,-1,3,4,2,4,5,3,2,6,1,4,5,3,5,6,4,6,4,2,5,6,1,3,4,2,6,2,0,1,2,0,2,3,1,0,4,-1,5,6,4,6,7,2,4,2,0,0,1,-1,6,7,0,-1,7,-2,3,4,2,4,5,3,2,6,1,4,5,3,5,6,4,6,4,2,2,3,1,6,7,2,1,7,0,4,5,3,5,6,4,3,7,2,5,6,4,6,7,5,7,5,3,6,7,2,4,5,3,7,3,1,5,6,4,6,7,2,4,7,0,3,4,2,4,5,3,2,3,1,6,7,0,2,3,1,7,1,-1,1,2,0,2,3,1,0,4,-1,2,3,1,3,4,2,4,2,0,0,1,-1,1,5,3,-1,5,-2,5,6,4,6,7,2,4,5,3,6,7,5,7,8,6,5,6,4,4,5,3,2,6,4,5,4,2,0,1,-1,1,2,0,-1,3,-2,6,7,5,7,8,6,5,6,4,-1,0,-2,7,8,6,-2,8,-3,3,4,2,4,5,3,2,6,1,4,5,3,5,6,4,6,4,2,2,3,1,6,7,2,1,7,0,4,5,3,5,6,4,3,7,2,5,6,4,6,7,5,7,5,3,6,7,2,4,5,3,7,3,1,2,3,1,3,4,2,1,5,0,6,7,5,7,8,6,5,6,4,1,2,0,7,8,6,0,8,-1,4,5,3,5,6,4,3,7,2,5,6,4,6,7,5,7,5,3,3,4,2,7,8,6,2,8,1,5,6,4,6,7,5,4,8,3,6,7,5,7,8,6,8,6,4,7,8,6,5,6,4,8,4,2,6,7,5,7,8,6,5,8,4,4,5,3,5,6,4,6,4,2,7,8,6,3,4,2,8,2,0,5,6,4,6,7,2,4,5,3,6,7,5,7,8,6,5,6,4,4,5,3,7,8,6,3,8,2,3,4,2,4,5,3,2,6,1,4,5,3,5,6,4,6,4,2,2,6,4,3,4,2,6,2,0,6,7,5,7,8,6,5,8,4,2,3,1,3,4,2,4,2,0,7,8,6,1,2,0,8,0,-2,4,5,3,5,6,1,3,4,2,5,6,4,6,7,2,4,2,0,3,4,2,4,5,3,2,5,1,5,6,4,6,7,2,4,5,3,6,7,5,7,8,6,5,6,4,4,5,3,2,6,4,5,4,2,3,4,2,4,5,0,2,3,1,6,7,5,7,8,6,5,6,4,2,3,1,7,8,6,1,8,0,2,3,1,3,4,2,1,2,0,3,4,2,4,5,3,2,3,1,1,2,0,2,6,4,0,6,-1,3,4,2,4,5,3,2,6,1,4,5,3,5,6,4,6,4,2,2,6,4,3,4,2,6,2,0,4,2,0,2,6,4,3,6,2,2,3,1,3,4,2,4,2,0,0,6,4,1,2,0,6,0,-2,5,6,4,6,7,2,4,5,3,6,7,5,7,8,6,5,6,4,4,5,3,7,8,6,3,8,2,1,2,0,2,3,1,0,4,-1,2,3,1,3,4,2,4,2,0,0,4,2,1,2,0,4,0,-2,6,7,5,7,8,6,5,8,4,0,1,-1,1,2,0,2,0,-2,7,8,6,-1,0,-2,8,-2,-4,3,4,2,4,5,0,2,3,1,4,5,3,5,6,1,3,4,-1,2,3,1,3,4,2,1,4,0,4,5,3,5,6,1,3,4,2,5,6,4,6,7,2,4,2,0,3,4,2,1,2,0,4,0,-2,2,3,1,3,4,-1,1,2,0,3,4,2,4,5,3,2,3,1,1,2,0,4,5,1,0,5,-1,4,5,3,5,6,1,3,4,2,5,6,4,6,7,2,4,2,0,3,4,2,4,5,3,2,5,1,5,6,4,6,7,2,4,5,3,6,7,5,7,8,6,5,6,4,4,5,3,2,6,4,5,4,2,3,4,2,4,5,0,2,5,1,4,2,0,2,6,4,3,4,2,4,5,1,0,4,2,5,2,0,2,3,1,3,4,2,1,2,0,3,4,2,4,5,0,2,0,-2,1,2,0,2,3,1,0,3,-1,5,6,4,6,7,2,4,5,3,6,7,5,7,8,6,5,6,4,4,5,3,2,6,4,3,4,2,1,2,0,2,3,-2,0,1,-1,6,7,5,7,8,6,5,6,4,0,1,-1,7,8,6,-1,8,-2,1,2,0,2,3,1,0,4,-1,2,3,1,3,4,2,4,2,0,0,1,-1,1,2,0,-1,2,-2,2,3,1,3,4,2,1,2,0,3,4,2,4,5,3,2,3,1,1,2,0,2,3,1,2,1,-1,0,1,-1,1,2,0,-1,0,-2,4,2,0,2,6,4,3,4,2,-1,0,-2,0,6,4,-2,6,-3,2,3,1,3,4,2,1,2,0,3,4,2,4,5,3,2,3,1,1,2,0,2,6,4,0,6,-1,3,4,2,4,5,3,2,6,1,4,5,3,5,6,4,6,4,2,2,6,4,3,4,2,6,2,0,4,2,0,2,6,4,3,6,2,2,3,1,3,4,2,4,2,0,0,6,4,1,2,0,6,0,-2,3,4,2,1,2,0,2,3,-2,4,2,0,2,6,4,3,4,2,2,3,1,0,6,4,1,6,0,1,2,0,2,3,1,0,4,-1,2,3,1,3,4,2,4,2,0,0,4,2,1,2,0,4,0,-2,4,0,-2,0,6,4,3,6,2,0,1,-1,1,2,0,2,0,-2,-2,6,4,-1,0,-2,6,-2,-4,4,5,3,5,6,1,3,4,2,5,6,4,6,7,0,4,2,0,3,4,2,2,5,3,2,3,1,5,6,4,6,7,2,4,5,3,6,7,5,7,8,6,5,6,4,4,5,3,2,6,4,3,4,2,3,4,2,4,5,0,2,3,1,6,7,5,7,8,6,5,6,4,2,3,1,7,8,6,1,8,0,0,1,-1,1,2,0,-1,0,-2,1,2,0,2,3,1,0,1,-1,-1,0,-2,0,4,2,-2,4,-3,1,2,0,2,3,1,0,4,-1,2,3,1,3,4,2,4,2,0,0,4,2,1,2,0,4,0,-2,2,0,-2,0,4,2,1,4,0,0,1,-1,1,2,0,2,0,-2,-2,4,2,-1,0,-2,4,-2,-4,5,6,4,6,7,2,4,5,3,6,7,5,7,8,6,5,6,4,4,5,3,7,8,6,3,8,2,-1,0,-2,0,1,-1,-2,2,-3,0,1,-1,1,2,0,2,0,-2,-2,2,0,-1,0,-2,2,-2,-4,6,7,5,7,8,6,5,8,4,-2,-1,-3,-1,0,-2,0,-2,-4,7,8,6,-3,-2,-4,8,-4,-6,-1,0,-2,0,1,-1,-2,2,-3,0,1,-1,1,2,0,2,0,-2,-2,-1,-3,2,3,-2,-3,3,-4,0,1,-1,1,2,0,-1,3,-2,1,2,0,2,3,1,3,1,-1,2,3,-2,0,1,-1,3,-1,-3,-2,-1,-3,-1,0,-2,-3,1,-4,2,3,1,3,4,-1,1,2,-3,-3,-2,-4,3,4,-3,-4,4,-5,0,1,-1,1,2,0,-1,3,-2,1,2,0,2,3,1,3,1,-1,-1,0,-2,3,4,-1,-2,4,-3,1,2,0,2,3,1,0,4,-1,2,3,1,3,4,2,4,2,0,3,4,-1,1,2,0,4,0,-2,2,3,1,3,4,-1,-2,4,-3,0,1,-1,1,2,0,2,0,-2,3,4,-3,-1,0,-2,4,-2,-4,-2,-1,-3,-1,0,-2,-3,1,-4,-1,0,-2,0,1,-1,1,-1,-3,-3,-2,-4,-2,2,0,-4,2,-5,2,3,1,3,4,-1,1,2,0,3,4,2,4,5,0,2,0,-2,-2,2,0,-1,0,-2,2,-2,-4,-3,-2,-4,-2,-1,-3,-4,0,-5,3,4,2,4,5,-2,0,-2,-4,-4,-3,-5,4,5,-4,-5,5,-6,0,1,-1,1,2,0,-1,3,-2,1,2,0,2,3,1,3,1,-1,-1,0,-2,3,4,-1,-2,4,-3,1,2,0,2,3,1,0,4,-1,2,3,1,3,4,2,4,2,0,3,4,-1,1,2,0,4,0,-2,-1,0,-2,0,1,-1,-2,2,-3,3,4,2,4,5,0,2,0,-2,-2,-1,-3,4,5,-2,-3,5,-4,1,2,0,2,3,1,0,4,-1,2,3,1,3,4,2,4,2,0,0,1,-1,4,5,0,-1,5,-2,2,3,1,3,4,2,1,5,0,3,4,2,4,5,3,5,3,1,4,5,0,2,3,1,5,1,-1,3,4,2,4,5,0,-1,5,-2,1,2,0,2,3,1,0,1,-1,4,5,-2,0,1,-1,5,-1,-3,2,3,1,3,4,-1,1,2,0,3,4,2,4,5,0,-1,0,-2,-2,-1,-3,4,5,-2,-3,5,-4,0,1,-1,1,2,0,-1,0,-2,1,2,0,2,3,1,0,1,-1,-1,0,-2,0,1,-1,0,-1,-3,3,4,2,4,5,-2,-3,5,-4,-1,0,-2,0,1,-1,-2,-1,-3,4,5,-4,-2,-1,-3,5,-3,-5,-2,-1,-3,-1,0,-2,-3,1,-4,-1,0,-2,0,1,-1,1,-1,-3,-3,-2,-4,1,2,-3,-4,2,-5,-1,0,-2,0,1,-1,-2,2,-3,0,1,-1,1,2,0,2,0,-2,1,2,-3,-1,0,-2,2,-2,-4,-3,-2,-4,-2,-1,-3,-4,0,-5,-2,2,-3,-1,3,1,0,1,-1,-4,-3,-5,-3,3,1,-5,3,-6,-1,0,-2,0,1,-1,-2,2,-3,0,1,-1,1,2,0,2,0,-2,-2,-1,-3,-1,3,1,-3,3,-4,0,1,-1,1,2,0,-1,3,-2,1,2,0,2,6,4,3,4,2,2,3,1,0,4,2,3,2,0,1,2,0,2,3,1,0,3,-1,2,0,-2,0,4,2,1,2,0,0,3,1,-2,2,0,3,0,-2,-3,-2,-4,-2,-1,-3,-4,0,-5,-2,-1,-3,-1,0,-2,0,-2,-4,-4,-3,-5,-3,1,-1,-5,1,-6,-2,-1,-3,-1,0,-2,-3,1,-4,-1,0,-2,0,6,4,3,4,2,2,3,1,0,4,2,1,2,0,-4,-3,-5,-3,-2,-4,-5,-1,-6,-3,-2,-4,-2,6,4,3,4,2,-5,-4,-6,-4,6,4,-6,6,-7,0,1,-1,1,2,0,-1,0,-2,1,2,0,2,3,1,0,1,-1,-1,0,-2,0,1,-1,-2,1,-3,1,2,0,2,3,1,0,1,-1,2,3,1,3,4,2,1,2,0,0,1,-1,1,2,0,1,0,-2,-1,0,-2,0,1,-1,-2,2,-3,0,1,-1,1,2,0,2,0,-2,-2,-1,-3,1,2,-2,-3,2,-4,1,2,0,2,3,1,0,1,-1,2,3,1,3,4,2,1,2,0,0,1,-1,1,2,0,-1,2,-2,2,3,1,3,4,2,1,2,0,3,4,2,4,5,3,2,3,1,1,2,0,2,3,1,2,1,-1,0,1,-1,1,2,0,-1,2,-2,1,2,0,2,3,1,0,1,-1,1,2,-2,0,1,-1,2,-1,-3,-1,0,-2,0,1,-1,-2,-1,-3,0,1,-1,1,2,0,-1,0,-2,-2,-1,-3,-1,0,-2,-3,0,-4,0,1,-1,1,2,0,-1,0,-2,1,2,0,2,6,4,3,4,2,2,3,1,0,4,2,1,2,0,-2,-1,-3,-1,0,-2,-3,-2,-4,-1,0,-2,0,6,4,3,4,2,-3,-2,-4,-2,6,4,-4,6,-5,1,2,0,2,3,1,0,1,-1,2,3,1,3,4,2,1,2,0,0,1,-1,1,2,0,-1,0,-2,2,3,1,3,4,2,1,2,0,3,4,2,4,5,3,2,3,1,1,2,0,2,3,1,0,1,-1,0,1,-1,1,2,0,-1,0,-2,1,2,0,2,6,4,3,4,2,-1,0,-2,0,6,4,-2,6,-3,2,3,1,3,4,2,1,2,0,3,4,2,4,5,3,2,3,1,1,2,0,2,6,4,0,6,-1,3,4,2,4,5,3,2,6,1,4,5,3,5,6,4,6,4,2,2,6,4,3,4,2,6,2,0,1,2,0,2,6,4,3,6,2,2,3,1,3,4,2,4,2,0,0,6,4,1,2,0,6,0,-2,0,1,-1,1,2,0,-1,3,-2,1,2,0,2,6,4,3,4,2,2,3,1,0,6,4,1,6,0,1,2,0,2,3,1,0,4,-1,2,3,1,3,4,2,4,2,0,0,4,2,1,2,0,4,0,-2,-1,0,-2,0,6,4,3,6,2,0,1,-1,1,2,0,2,0,-2,-2,6,4,-1,0,-2,6,-2,-4,-1,0,-2,0,1,-1,-2,2,-3,0,1,-1,1,2,0,2,0,-2,-2,-1,-3,2,3,-2,-3,3,-4,0,1,-1,1,2,0,-1,3,-2,1,2,0,2,6,4,3,4,2,2,3,1,0,4,2,3,2,0,1,2,0,2,3,-2,0,1,-1,-1,0,-2,0,6,4,3,4,2,0,1,-1,-2,6,4,-1,6,-2,0,1,-1,1,2,0,-1,0,-2,1,2,0,2,3,1,0,1,-1,-1,0,-2,0,4,2,-2,4,-3,1,2,0,2,3,1,0,4,-1,2,3,1,3,4,2,4,2,0,0,4,2,1,2,0,4,0,-2,2,0,-2,0,4,2,1,4,0,0,1,-1,1,2,0,2,0,-2,-2,4,2,-1,0,-2,4,-2,-4,-2,-1,-3,-1,0,-2,-3,1,-4,-1,0,-2,0,6,4,3,4,2,2,3,1,-2,6,4,1,6,0,-1,0,-2,0,1,-1,-2,2,-3,0,1,-1,1,2,0,2,0,-2,-2,2,0,-1,0,-2,2,-2,-4,-3,-2,-4,-2,6,4,3,6,2,-2,-1,-3,-1,0,-2,0,-2,-4,-4,6,4,-3,-2,-4,6,-4,-6,-2,-1,-3,-1,0,-2,-3,1,-4,-1,0,-2,0,1,-1,1,-1,-3,-3,-2,-4,1,2,-3,-4,2,-5,-1,0,-2,0,1,-1,-2,2,-3,0,1,-1,1,2,0,2,0,-2,1,2,-3,-1,0,-2,2,-2,-4,-3,-2,-4,-2,-1,-3,-4,0,-5,1,2,0,2,3,-2,0,-2,-4,-4,-3,-5,2,3,-4,-5,3,-6,-1,0,-2,0,1,-1,-2,2,-3,0,1,-1,1,2,0,2,0,-2,-2,-1,-3,2,3,-2,-3,3,-4,0,1,-1,1,2,0,-1,3,-2,1,2,0,2,3,1,3,1,-1,2,3,-2,0,1,-1,3,-1,-3,1,2,0,2,3,-2,-3,3,-4,-1,0,-2,0,1,-1,-2,-1,-3,2,3,-4,-2,-1,-3,3,-3,-5,-3,-2,-4,-2,-1,-3,-4,0,-5,-2,-1,-3,-1,0,-2,0,-2,-4,-4,-3,-5,-3,1,-1,-5,1,-6,-2,-1,-3,-1,0,-2,-3,1,-4,-1,0,-2,0,4,2,1,2,0,0,1,-1,-2,2,0,1,0,-2,-4,-3,-5,-3,-2,-4,-5,-1,-6,-3,-2,-4,-2,4,2,1,2,0,-5,-4,-6,-4,4,2,-6,4,-7,-1,0,-2,0,1,-1,-2,-1,-3,0,1,-1,1,2,0,-1,0,-2,-2,-1,-3,-1,0,-2,-3,0,-4,0,1,-1,1,2,0,-1,0,-2,1,2,0,2,3,1,0,1,-1,-1,0,-2,0,1,-1,0,-1,-3,-2,-1,-3,-1,0,-2,-3,-2,-4,-1,0,-2,0,4,2,1,2,0,-3,-2,-4,-2,4,2,-4,4,-5,0,1,-1,1,2,0,-1,0,-2,1,2,0,2,3,1,0,1,-1,-1,0,-2,0,4,2,-2,4,-3,1,2,0,2,3,1,0,4,-1,2,3,1,3,4,2,4,2,0,0,4,2,1,2,0,4,0,-2,-1,0,-2,0,4,2,1,4,0,0,1,-1,1,2,0,2,0,-2,-2,4,2,-1,0,-2,4,-2,-4,-2,-1,-3,-1,0,-2,-3,1,-4,-1,0,-2,0,4,2,1,2,0,0,1,-1,-2,4,2,-1,4,-2,-1,0,-2,0,1,-1,-2,2,-3,0,1,-1,1,2,0,2,0,-2,-2,2,0,-1,0,-2,2,-2,-4,-3,-2,-4,-2,4,2,1,4,0,-2,-1,-3,-1,0,-2,0,-2,-4,-4,4,2,-3,-2,-4,4,-4,-6,-3,-2,-4,-2,-1,-3,-4,0,-5,-2,-1,-3,-1,0,-2,0,-2,-4,-4,-3,-5,0,1,-4,-5,1,-6,-2,-1,-3,-1,0,-2,-3,1,-4,-1,0,-2,0,1,-1,1,-1,-3,0,1,-4,-2,-1,-3,1,-3,-5,-4,-3,-5,-3,-2,-4,-5,-1,-6,-3,-2,-4,-2,2,0,-1,0,-2,-5,-4,-6,-4,2,0,-6,2,-7,-2,-1,-3,-1,0,-2,-3,-2,-4,-1,0,-2,0,1,-1,-2,-1,-3,-3,-2,-4,-2,2,0,-4,2,-5,-1,0,-2,0,1,-1,-2,2,-3,0,1,-1,1,2,0,2,0,-2,-2,2,0,-1,0,-2,2,-2,-4,-3,-2,-4,-2,2,0,-1,2,-2,-2,-1,-3,-1,0,-2,0,-2,-4,-4,2,0,-3,-2,-4,2,-4,-6,-4,-3,-5,-3,-2,-4,-5,-1,-6,-3,-2,-4,-2,-1,-3,-1,-3,-5,-5,-4,-6,-4,0,-2,-6,0,-7,-3,-2,-4,-2,-1,-3,-4,0,-5,-2,-1,-3,-1,0,-2,0,-2,-4,-4,0,-2,-3,-2,-4,0,-4,-6,-5,-4,-6,-4,-3,-5,-6,-2,-7,-4,-3,-5,-3,-2,-4,-2,-4,-6,-6,-5,-7,-5,-4,-6,-7,-6,-8,\n"

/***/ }),
/* 3 */
/***/ (function(module, exports) {

module.exports = "0.5634549928997963, -0.6310708023640152, -0.9663195822299078, 0.9957764648108598, -0.870416654803672, 0.023597546477911457, -0.9759062792006898, -0.10382213993278122, -0.608521423703265, 0.21544833989063372, -0.20538091173244588, 0.5327107326039202, 0.7563038349905704, 0.9626723919122855, 0.41502810248616795, 0.7247995351499461, 0.8783601822067855, 0.5078601020603293, -0.5980614605186174, 0.4299600141560085, 0.9018876588870375, 0.7078413720152685, 0.6953926108997219, 0.254733222636083, 0.8102764619478566"

/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

const boardFunctions = __webpack_require__(0);

function computeBlackMove()
{
	let bestValue = Number.NEGATIVE_INFINITY;
	let bestMove = -1;
	let alpha = Number.NEGATIVE_INFINITY;
	let beta = Number.POSITIVE_INFINITY;
	let value, newBlackBoard, newWhiteBoard;
	let pieceCount = 0;
	for(let k = 0; k < 64; ++k)
	{
		if(blackPieces[k] || whitePieces[k])
			++pieceCount;
	}
	for(let move = 0; move < 64; ++move)
	{
		if(legalMoves[move])
		{
			newBlackBoard = blackPieces.slice();
			newWhiteBoard = whitePieces.slice();
			boardFunctions.makeBlackMove(move, newBlackBoard, newWhiteBoard);
			if(pieceCount < 50)
				value = valueStateWhite(7, newBlackBoard, newWhiteBoard, alpha, beta, false);
			else
				value = valueStateWhite(13, newBlackBoard, newWhiteBoard, alpha, beta, true);
			if(value > bestValue)
			{
				alpha = value;
				bestValue = value;
				bestMove = move;
			}
			if(beta <= alpha)
				break;
		}
	}
	boardFunctions.makeBlackMove(bestMove, blackPieces, whitePieces);
}

function valueStateBlack(evaluationDepth, blackBoard, whiteBoard, alpha, beta, terminal)
{
	if(evaluationDepth == 0)
		return terminalEvaluation(blackBoard, whiteBoard, terminal);
	let newLegalMoves = boardFunctions.getBlackLegalMoves(blackBoard, whiteBoard);
	if(newLegalMoves.every(x => !x))
	{
		if(boardFunctions.getWhiteLegalMoves(blackBoard, whiteBoard).every(x => !x))
			return terminalEvaluation(blackBoard, whiteBoard, true);
		else
			return valueStateWhite(evaluationDepth, blackBoard, whiteBoard, alpha, beta, terminal);
	}
	let value = Number.NEGATIVE_INFINITY;
	let newBlackBoard, newWhiteBoard;
	for(let move = 0; move < 64; ++move)
	{
		if(newLegalMoves[move])
		{
			newBlackBoard = blackBoard.slice();
			newWhiteBoard = whiteBoard.slice();
			boardFunctions.makeBlackMove(move, newBlackBoard, newWhiteBoard);
			value = Math.max(value, valueStateWhite(evaluationDepth - 1, newBlackBoard, newWhiteBoard, alpha, beta, terminal));	
			alpha = Math.max(alpha, value);
			if(beta <= alpha)
				break;
		}
	}
	return value;
}

function valueStateWhite(evaluationDepth, blackBoard, whiteBoard, alpha, beta, terminal)
{
	if(evaluationDepth == 0)
		return terminalEvaluation(blackBoard, whiteBoard, terminal);
	let newLegalMoves = boardFunctions.getWhiteLegalMoves(blackBoard, whiteBoard);
	if(newLegalMoves.every(x => !x))
	{
		if(boardFunctions.getBlackLegalMoves(blackBoard, whiteBoard).every(x => !x))
			return terminalEvaluation(blackBoard, whiteBoard, true);
		else
			return valueStateBlack(evaluationDepth, blackBoard, whiteBoard, alpha, beta, terminal);
	}
	let value = Number.POSITIVE_INFINITY;
	let newBlackBoard, newWhiteBoard;
	for(let move = 0; move < 64; ++move)
	{
		if(newLegalMoves[move])
		{
			newBlackBoard = blackBoard.slice();
			newWhiteBoard = whiteBoard.slice();
			boardFunctions.makeWhiteMove(move, newBlackBoard, newWhiteBoard);
			value = Math.min(value, valueStateBlack(evaluationDepth - 1, newBlackBoard, newWhiteBoard, alpha, beta, terminal));
			beta = Math.min(beta, value);
			if(beta <= alpha)
				break;
		}
	}
	return value;
}

function terminalEvaluation(blackBoard, whiteBoard, terminal)
{
	if(terminal)
	{
		if(blackBoard.every(x => !x))
			return -1064;
		else if(whiteBoard.every(x => !x))
			return 1064;
		else
		{
			let count = 0;
			for(let k = 0; k < 64; ++k)
			{
				if(blackBoard[k])
					++count;
				else if(whiteBoard[k])
					--count;
			}
			if(count > 0)
				return count + 1000;
			else if(count < 0)
				return count - 1000;
			else
				return 0;
		}
	}

	let result = 0;
	//Move Differential Computation
	let blackLegalMoves = boardFunctions.getBlackLegalMoves(blackBoard, whiteBoard);
	let whiteLegalMoves = boardFunctions.getWhiteLegalMoves(blackBoard, whiteBoard);
	for(let k = 0; k < 64; ++k)
	{
		if(blackLegalMoves[k])
			result += neuralCoefficients[24];
		if(whiteLegalMoves[k])
			result -= neuralCoefficients[24];
	}
	//Horizontal Row Precomps
	result += neuralCoefficients[16] * precomps[14][extractIndex(blackBoard, whiteBoard, [0, 1, 2, 3, 4, 5, 6, 7])];
	result += neuralCoefficients[18] * precomps[14][extractIndex(blackBoard, whiteBoard, [8, 9, 10, 11, 12, 13, 14, 15])];
	result += neuralCoefficients[18] * precomps[14][extractIndex(blackBoard, whiteBoard, [48, 49, 50, 51, 52, 53, 54, 55])];
	result += neuralCoefficients[16] * precomps[14][extractIndex(blackBoard, whiteBoard, [56, 57, 58, 59, 60, 61, 62, 63])];
	result += neuralCoefficients[17] * precomps[15][extractIndex(blackBoard, whiteBoard, [0, 1, 2, 3, 4, 5, 6, 7])];
	result += neuralCoefficients[19] * precomps[15][extractIndex(blackBoard, whiteBoard, [8, 9, 10, 11, 12, 13, 14, 15])];
	result += neuralCoefficients[21] * precomps[15][extractIndex(blackBoard, whiteBoard, [16, 17, 18, 19, 20, 21, 22, 23])];
	result += neuralCoefficients[23] * precomps[15][extractIndex(blackBoard, whiteBoard, [24, 25, 26, 27, 28, 29, 30, 31])];
	result += neuralCoefficients[23] * precomps[15][extractIndex(blackBoard, whiteBoard, [32, 33, 34, 35, 36, 37, 38, 39])];
	result += neuralCoefficients[21] * precomps[15][extractIndex(blackBoard, whiteBoard, [40, 41, 42, 43, 44, 45, 46, 47])];
	result += neuralCoefficients[19] * precomps[15][extractIndex(blackBoard, whiteBoard, [48, 49, 50, 51, 52, 53, 54, 55])];
	result += neuralCoefficients[17] * precomps[15][extractIndex(blackBoard, whiteBoard, [56, 57, 58, 59, 60, 61, 62, 63])];
	//Vertical Row Precomps
	result += neuralCoefficients[16] * precomps[14][extractIndex(blackBoard, whiteBoard, [0, 8, 16, 24, 32, 40, 48, 56])];
	result += neuralCoefficients[18] * precomps[14][extractIndex(blackBoard, whiteBoard, [1, 9, 17, 25, 33, 41, 49, 57])];
	result += neuralCoefficients[18] * precomps[14][extractIndex(blackBoard, whiteBoard, [6, 14, 22, 30, 38, 46, 54, 62])];
	result += neuralCoefficients[16] * precomps[14][extractIndex(blackBoard, whiteBoard, [7, 15, 23, 31, 39, 47, 55, 63])];
	result += neuralCoefficients[17] * precomps[15][extractIndex(blackBoard, whiteBoard, [0, 8, 16, 24, 32, 40, 48, 56])];
	result += neuralCoefficients[19] * precomps[15][extractIndex(blackBoard, whiteBoard, [1, 9, 17, 25, 33, 41, 49, 57])];
	result += neuralCoefficients[21] * precomps[15][extractIndex(blackBoard, whiteBoard, [2, 10, 18, 26, 34, 42, 50, 58])];
	result += neuralCoefficients[23] * precomps[15][extractIndex(blackBoard, whiteBoard, [3, 11, 19, 27, 35, 43, 51, 59])];
	result += neuralCoefficients[23] * precomps[15][extractIndex(blackBoard, whiteBoard, [4, 12, 20, 28, 36, 44, 52, 60])];
	result += neuralCoefficients[21] * precomps[15][extractIndex(blackBoard, whiteBoard, [5, 13, 21, 29, 37, 45, 53, 61])];
	result += neuralCoefficients[19] * precomps[15][extractIndex(blackBoard, whiteBoard, [6, 14, 22, 30, 38, 46, 54, 62])];
	result += neuralCoefficients[17] * precomps[15][extractIndex(blackBoard, whiteBoard, [7, 15, 23, 31, 39, 47, 55, 63])];
	//Diagonal Precomps
	result += 2 * neuralCoefficients[0] * precomps[0][extractIndex(blackBoard, whiteBoard, [7])];
	result += neuralCoefficients[4] * precomps[4][extractIndex(blackBoard, whiteBoard, [5, 14, 23])];
	result += neuralCoefficients[5] * precomps[5][extractIndex(blackBoard, whiteBoard, [5, 14, 23])];
	result += neuralCoefficients[6] * precomps[6][extractIndex(blackBoard, whiteBoard, [4, 13, 22, 31])];
	result += neuralCoefficients[7] * precomps[7][extractIndex(blackBoard, whiteBoard, [4, 13, 22, 31])];
	result += neuralCoefficients[8] * precomps[8][extractIndex(blackBoard, whiteBoard, [3, 12, 21, 30, 39])];
	result += neuralCoefficients[9] * precomps[9][extractIndex(blackBoard, whiteBoard, [3, 12, 21, 30, 39])];
	result += neuralCoefficients[10] * precomps[10][extractIndex(blackBoard, whiteBoard, [2, 11, 20, 29, 38, 47])];
	result += neuralCoefficients[11] * precomps[11][extractIndex(blackBoard, whiteBoard, [2, 11, 20, 29, 38, 47])];
	result += neuralCoefficients[15] * precomps[15][extractIndex(blackBoard, whiteBoard, [0, 9, 18, 27, 36, 45, 54, 63])];
	result += neuralCoefficients[10] * precomps[10][extractIndex(blackBoard, whiteBoard, [16, 25, 34, 43, 52, 61])];
	result += neuralCoefficients[11] * precomps[11][extractIndex(blackBoard, whiteBoard, [16, 25, 34, 43, 52, 61])];
	result += neuralCoefficients[8] * precomps[8][extractIndex(blackBoard, whiteBoard, [24, 33, 42, 51, 60])];
	result += neuralCoefficients[9] * precomps[9][extractIndex(blackBoard, whiteBoard, [24, 33, 42, 51, 60])];
	result += neuralCoefficients[6] * precomps[6][extractIndex(blackBoard, whiteBoard, [32, 41, 50, 59])];
	result += neuralCoefficients[7] * precomps[7][extractIndex(blackBoard, whiteBoard, [32, 41, 50, 59])];
	result += neuralCoefficients[4] * precomps[4][extractIndex(blackBoard, whiteBoard, [40, 49, 58])];
	result += neuralCoefficients[5] * precomps[5][extractIndex(blackBoard, whiteBoard, [40, 49, 58])];
	result += 2 * neuralCoefficients[0] * precomps[0][extractIndex(blackBoard, whiteBoard, [56])];
	//Anti-Diagonal Precomps
	result += 2 * neuralCoefficients[0] * precomps[0][extractIndex(blackBoard, whiteBoard, [0])];
	result += neuralCoefficients[4] * precomps[4][extractIndex(blackBoard, whiteBoard, [2, 9, 16])];
	result += neuralCoefficients[5] * precomps[5][extractIndex(blackBoard, whiteBoard, [2, 9, 16])];
	result += neuralCoefficients[6] * precomps[6][extractIndex(blackBoard, whiteBoard, [3, 10, 17, 24])];
	result += neuralCoefficients[7] * precomps[7][extractIndex(blackBoard, whiteBoard, [3, 10, 17, 24])];
	result += neuralCoefficients[8] * precomps[8][extractIndex(blackBoard, whiteBoard, [4, 11, 18, 25, 32])];
	result += neuralCoefficients[9] * precomps[9][extractIndex(blackBoard, whiteBoard, [4, 11, 18, 25, 32])];
	result += neuralCoefficients[10] * precomps[10][extractIndex(blackBoard, whiteBoard, [5, 12, 19, 26, 33, 40])];
	result += neuralCoefficients[11] * precomps[11][extractIndex(blackBoard, whiteBoard, [5, 12, 19, 26, 33, 40])];
	result += neuralCoefficients[15] * precomps[15][extractIndex(blackBoard, whiteBoard, [7, 14, 21, 28, 35, 42, 49, 56])];
	result += neuralCoefficients[10] * precomps[10][extractIndex(blackBoard, whiteBoard, [23, 30, 37, 44, 51, 58])];
	result += neuralCoefficients[11] * precomps[11][extractIndex(blackBoard, whiteBoard, [23, 30, 37, 44, 51, 58])];
	result += neuralCoefficients[8] * precomps[8][extractIndex(blackBoard, whiteBoard, [31, 38, 45, 52, 59])];
	result += neuralCoefficients[9] * precomps[9][extractIndex(blackBoard, whiteBoard, [31, 38, 45, 52, 59])];
	result += neuralCoefficients[6] * precomps[6][extractIndex(blackBoard, whiteBoard, [39, 46, 53, 60])];
	result += neuralCoefficients[7] * precomps[7][extractIndex(blackBoard, whiteBoard, [39, 46, 53, 60])];
	result += neuralCoefficients[4] * precomps[4][extractIndex(blackBoard, whiteBoard, [47, 54, 61])];
	result += neuralCoefficients[5] * precomps[5][extractIndex(blackBoard, whiteBoard, [47, 54, 61])];
	result += 2 * neuralCoefficients[0] * precomps[0][extractIndex(blackBoard, whiteBoard, [63])];
	return result;
}

function extractIndex(blackBoard, whiteBoard, positions)
{
	let index = 0;
	for(let k = 0; k < positions.length; ++k)
	{
		index *= 3;
		if(blackBoard[positions[k]])
			++index;
		else if(whiteBoard[positions[k]])
			index += 2;
	}
	return index;
}

module.exports = computeBlackMove

/***/ })
/******/ ]);